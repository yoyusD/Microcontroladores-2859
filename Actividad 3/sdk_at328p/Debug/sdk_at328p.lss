
sdk_at328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  0000173a  000017ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000173a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001be  008001be  0000188c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027ba  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f57  00000000  00000000  000042c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001664  00000000  00000000  0000521d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c4  00000000  00000000  00006884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f7  00000000  00000000  00007561  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_1>
       8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_2>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_18>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_21>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_23>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	0e 06       	cpc	r0, r30
      6a:	11 06       	cpc	r1, r17
      6c:	8c 05       	cpc	r24, r12
      6e:	99 05       	cpc	r25, r9
      70:	a6 05       	cpc	r26, r6
      72:	b3 05       	cpc	r27, r3
      74:	c0 05       	cpc	r28, r0
      76:	cd 05       	cpc	r28, r13
      78:	da 05       	cpc	r29, r10
      7a:	e7 05       	cpc	r30, r7
      7c:	f4 05       	cpc	r31, r4
      7e:	01 06       	cpc	r0, r17

00000080 <__trampolines_end>:
      80:	00 40       	sbci	r16, 0x00	; 0
      82:	7a 10       	cpse	r7, r10
      84:	f3 5a       	subi	r31, 0xA3	; 163
      86:	00 a0       	ldd	r0, Z+32	; 0x20
      88:	72 4e       	sbci	r23, 0xE2	; 226
      8a:	18 09       	sbc	r17, r8
      8c:	00 10       	cpse	r0, r0
      8e:	a5 d4       	rcall	.+2378   	; 0x9da <graphic+0x54>
      90:	e8 00       	.word	0x00e8	; ????
      92:	00 e8       	ldi	r16, 0x80	; 128
      94:	76 48       	sbci	r23, 0x86	; 134
      96:	17 00       	.word	0x0017	; ????
      98:	00 e4       	ldi	r16, 0x40	; 64
      9a:	0b 54       	subi	r16, 0x4B	; 75
      9c:	02 00       	.word	0x0002	; ????
      9e:	00 ca       	rjmp	.-3072   	; 0xfffff4a0 <__eeprom_end+0xff7ef4a0>
      a0:	9a 3b       	cpi	r25, 0xBA	; 186
      a2:	00 00       	nop
      a4:	00 e1       	ldi	r16, 0x10	; 16
      a6:	f5 05       	cpc	r31, r5
      a8:	00 00       	nop
      aa:	80 96       	adiw	r24, 0x20	; 32
      ac:	98 00       	.word	0x0098	; ????
      ae:	00 00       	nop
      b0:	40 42       	sbci	r20, 0x20	; 32
      b2:	0f 00       	.word	0x000f	; ????
      b4:	00 00       	nop
      b6:	a0 86       	std	Z+8, r10	; 0x08
      b8:	01 00       	.word	0x0001	; ????
      ba:	00 00       	nop
      bc:	10 27       	eor	r17, r16
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	e8 03       	fmulsu	r22, r16
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	64 00       	.word	0x0064	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	0a 00       	.word	0x000a	; ????
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	01 00       	.word	0x0001	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	2c 76       	andi	r18, 0x6C	; 108
      dc:	d8 88       	ldd	r13, Y+16	; 0x10
      de:	dc 67       	ori	r29, 0x7C	; 124
      e0:	4f 08       	sbc	r4, r15
      e2:	23 df       	rcall	.-442    	; 0xffffff2a <__eeprom_end+0xff7eff2a>
      e4:	c1 df       	rcall	.-126    	; 0x68 <__SREG__+0x29>
      e6:	ae 59       	subi	r26, 0x9E	; 158
      e8:	e1 b1       	in	r30, 0x01	; 1
      ea:	b7 96       	adiw	r30, 0x27	; 39
      ec:	e5 e3       	ldi	r30, 0x35	; 53
      ee:	e4 53       	subi	r30, 0x34	; 52
      f0:	c6 3a       	cpi	r28, 0xA6	; 166
      f2:	e6 51       	subi	r30, 0x16	; 22
      f4:	99 76       	andi	r25, 0x69	; 105
      f6:	96 e8       	ldi	r25, 0x86	; 134
      f8:	e6 c2       	rjmp	.+1484   	; 0x6c6 <init_ports+0xa>
      fa:	84 26       	eor	r8, r20
      fc:	eb 89       	ldd	r30, Y+19	; 0x13
      fe:	8c 9b       	sbis	0x11, 4	; 17
     100:	62 ed       	ldi	r22, 0xD2	; 210
     102:	40 7c       	andi	r20, 0xC0	; 192
     104:	6f fc       	.word	0xfc6f	; ????
     106:	ef bc       	out	0x2f, r14	; 47
     108:	9c 9f       	mul	r25, r28
     10a:	40 f2       	brcs	.-112    	; 0x9c <__trampolines_end+0x1c>
     10c:	ba a5       	ldd	r27, Y+42	; 0x2a
     10e:	6f a5       	ldd	r22, Y+47	; 0x2f
     110:	f4 90       	lpm	r15, Z
     112:	05 5a       	subi	r16, 0xA5	; 165
     114:	2a f7       	brpl	.-54     	; 0xe0 <__trampolines_end+0x60>
     116:	5c 93       	st	X, r21
     118:	6b 6c       	ori	r22, 0xCB	; 203
     11a:	f9 67       	ori	r31, 0x79	; 121
     11c:	6d c1       	rjmp	.+730    	; 0x3f8 <__vector_1+0x26>
     11e:	1b fc       	.word	0xfc1b	; ????
     120:	e0 e4       	ldi	r30, 0x40	; 64
     122:	0d 47       	sbci	r16, 0x7D	; 125
     124:	fe f5       	brtc	.+126    	; 0x1a4 <.do_clear_bss_loop>
     126:	20 e6       	ldi	r18, 0x60	; 96
     128:	b5 00       	.word	0x00b5	; ????
     12a:	d0 ed       	ldi	r29, 0xD0	; 208
     12c:	90 2e       	mov	r9, r16
     12e:	03 00       	.word	0x0003	; ????
     130:	94 35       	cpi	r25, 0x54	; 84
     132:	77 05       	cpc	r23, r7
     134:	00 80       	ld	r0, Z
     136:	84 1e       	adc	r8, r20
     138:	08 00       	.word	0x0008	; ????
     13a:	00 20       	and	r0, r0
     13c:	4e 0a       	sbc	r4, r30
     13e:	00 00       	nop
     140:	00 c8       	rjmp	.-4096   	; 0xfffff142 <__eeprom_end+0xff7ef142>
     142:	0c 33       	cpi	r16, 0x3C	; 60
     144:	33 33       	cpi	r19, 0x33	; 51
     146:	33 0f       	add	r19, r19
     148:	98 6e       	ori	r25, 0xE8	; 232
     14a:	12 83       	std	Z+2, r17	; 0x02
     14c:	11 41       	sbci	r17, 0x11	; 17
     14e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     150:	21 14       	cp	r2, r1
     152:	89 3b       	cpi	r24, 0xB9	; 185
     154:	e6 55       	subi	r30, 0x56	; 86
     156:	16 cf       	rjmp	.-468    	; 0xffffff84 <__eeprom_end+0xff7eff84>
     158:	fe e6       	ldi	r31, 0x6E	; 110
     15a:	db 18       	sub	r13, r11
     15c:	d1 84       	ldd	r13, Z+9	; 0x09
     15e:	4b 38       	cpi	r20, 0x8B	; 139
     160:	1b f7       	brvc	.-58     	; 0x128 <__trampolines_end+0xa8>
     162:	7c 1d       	adc	r23, r12
     164:	90 1d       	adc	r25, r0
     166:	a4 bb       	out	0x14, r26	; 20
     168:	e4 24       	eor	r14, r4
     16a:	20 32       	cpi	r18, 0x20	; 32
     16c:	84 72       	andi	r24, 0x24	; 36
     16e:	5e 22       	and	r5, r30
     170:	81 00       	.word	0x0081	; ????
     172:	c9 f1       	breq	.+114    	; 0x1e6 <__vector_21+0x2e>
     174:	24 ec       	ldi	r18, 0xC4	; 196
     176:	a1 e5       	ldi	r26, 0x51	; 81
     178:	3d 27       	eor	r19, r29

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ea e3       	ldi	r30, 0x3A	; 58
     18e:	f7 e1       	ldi	r31, 0x17	; 23
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	ae 3b       	cpi	r26, 0xBE	; 190
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	ae eb       	ldi	r26, 0xBE	; 190
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a1 3c       	cpi	r26, 0xC1	; 193
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 4c 03 	call	0x698	; 0x698 <main>
     1b0:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <__vector_21>:
	ADCSRA|=(1<<ADIF);				//clear flag for next conversion
	return(ADC);					//return sample value
}

ISR (ADC_vect)
{
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	2f 93       	push	r18
     1d0:	3f 93       	push	r19
     1d2:	4f 93       	push	r20
     1d4:	5f 93       	push	r21
     1d6:	6f 93       	push	r22
     1d8:	7f 93       	push	r23
     1da:	8f 93       	push	r24
     1dc:	9f 93       	push	r25
     1de:	af 93       	push	r26
     1e0:	bf 93       	push	r27
     1e2:	ef 93       	push	r30
     1e4:	ff 93       	push	r31
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	2a 97       	sbiw	r28, 0x0a	; 10
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
	uint8_t LowPart = ADCL;	//10-bit resolution
     1f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH*256 + LowPart;
     1f8:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	76 2f       	mov	r23, r22
     200:	66 27       	eor	r22, r22
     202:	68 0f       	add	r22, r24
     204:	71 1d       	adc	r23, r1
	char i;
	char volt_t [10];
	float volt = TenBitResult*5.0/1023.0;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__floatunsisf>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 ea       	ldi	r20, 0xA0	; 160
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 ec       	ldi	r19, 0xC0	; 192
     21e:	4f e7       	ldi	r20, 0x7F	; 127
     220:	54 e4       	ldi	r21, 0x44	; 68
     222:	0e 94 76 07 	call	0xeec	; 0xeec <__divsf3>
     226:	6b 01       	movw	r12, r22
     228:	7c 01       	movw	r14, r24
		// x=((5v)*(1023))/5v=1023
		//1 integers, 2 decimals
	dtostrf(volt, 1, 2, volt_t);
     22a:	8e 01       	movw	r16, r28
     22c:	0f 5f       	subi	r16, 0xFF	; 255
     22e:	1f 4f       	sbci	r17, 0xFF	; 255
     230:	22 e0       	ldi	r18, 0x02	; 2
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	0e 94 12 09 	call	0x1224	; 0x1224 <dtostrf>

	switch(ADMUX){
     238:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     23c:	81 34       	cpi	r24, 0x41	; 65
     23e:	99 f0       	breq	.+38     	; 0x266 <__vector_21+0xae>
     240:	82 34       	cpi	r24, 0x42	; 66
     242:	09 f1       	breq	.+66     	; 0x286 <__vector_21+0xce>
     244:	80 34       	cpi	r24, 0x40	; 64
     246:	71 f5       	brne	.+92     	; 0x2a4 <__vector_21+0xec>
		case 0x40: //It shows the data of:ADC0
		i = 1; 
		ssd_num_write(volt_t,i);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	c8 01       	movw	r24, r16
     24c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd_num_write>
		graph_volt(volt,counter0,i);
     250:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <counter0>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	c7 01       	movw	r24, r14
     258:	b6 01       	movw	r22, r12
     25a:	0e 94 49 06 	call	0xc92	; 0xc92 <graph_volt>
		ADMUX = 0x41;
     25e:	81 e4       	ldi	r24, 0x41	; 65
     260:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
     264:	1f c0       	rjmp	.+62     	; 0x2a4 <__vector_21+0xec>
		case 0x41://It shows the data of:ADC1
		i = 2;
		ssd_num_write(volt_t,i);
     266:	62 e0       	ldi	r22, 0x02	; 2
     268:	ce 01       	movw	r24, r28
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd_num_write>
		graph_volt(volt,counter1,i);
     270:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <counter1>
     274:	22 e0       	ldi	r18, 0x02	; 2
     276:	c7 01       	movw	r24, r14
     278:	b6 01       	movw	r22, r12
     27a:	0e 94 49 06 	call	0xc92	; 0xc92 <graph_volt>
		ADMUX = 0x42;
     27e:	82 e4       	ldi	r24, 0x42	; 66
     280:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <__vector_21+0xec>
		case 0x42://It shows the data of:ADC2
		i = 3; 
		ssd_num_write(volt_t,i);
     286:	63 e0       	ldi	r22, 0x03	; 3
     288:	ce 01       	movw	r24, r28
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd_num_write>
		graph_volt(volt,counter2,i);
     290:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     294:	23 e0       	ldi	r18, 0x03	; 3
     296:	c7 01       	movw	r24, r14
     298:	b6 01       	movw	r22, r12
     29a:	0e 94 49 06 	call	0xc92	; 0xc92 <graph_volt>
		ADMUX = 0x40;
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
		default:
		break;
	}
	if(counter_clear == 80){
     2a4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     2a8:	80 35       	cpi	r24, 0x50	; 80
     2aa:	69 f4       	brne	.+26     	; 0x2c6 <__vector_21+0x10e>
		clear_graph(1);
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 26 06 	call	0xc4c	; 0xc4c <clear_graph>
		counter_clear = 0;
     2b2:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end>
		counter0 = 0;
     2b6:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <counter0>
		counter1 = -1;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter1>
		counter2 = -2;
     2c0:	8e ef       	ldi	r24, 0xFE	; 254
     2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	counter0++;
     2c6:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <counter0>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <counter0>
	counter1++;
     2d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <counter1>
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <counter1>
	counter2++;
     2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	counter_clear++;
     2e4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
	//start another conversion
	ADCSRA |= 1<<ADSC;
     2ee:	ea e7       	ldi	r30, 0x7A	; 122
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	80 64       	ori	r24, 0x40	; 64
     2f6:	80 83       	st	Z, r24
}
     2f8:	2a 96       	adiw	r28, 0x0a	; 10
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	ff 91       	pop	r31
     30a:	ef 91       	pop	r30
     30c:	bf 91       	pop	r27
     30e:	af 91       	pop	r26
     310:	9f 91       	pop	r25
     312:	8f 91       	pop	r24
     314:	7f 91       	pop	r23
     316:	6f 91       	pop	r22
     318:	5f 91       	pop	r21
     31a:	4f 91       	pop	r20
     31c:	3f 91       	pop	r19
     31e:	2f 91       	pop	r18
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	df 90       	pop	r13
     32a:	cf 90       	pop	r12
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <init_adc_withINT>:

void init_adc_withINT(void)
{
	ADCSRA |=(1 << ADEN);	//enable adc
     336:	ea e7       	ldi	r30, 0x7A	; 122
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	80 68       	ori	r24, 0x80	; 128
     33e:	80 83       	st	Z, r24
	ADCSRA |=(1 << ADPS2)|(0 << ADPS1)|(0 << ADPS0); // activate prescaler fo=16,000,000Hz/128~125KHz
     340:	80 81       	ld	r24, Z
     342:	84 60       	ori	r24, 0x04	; 4
     344:	80 83       	st	Z, r24
	//ADMUX |=(0 << ADLAR);	//right justified (ADCH bit9-2, ADCL bit1-0)
	ADMUX = 0x40;	//Selects ADC channel (0-5)
     346:	80 e4       	ldi	r24, 0x40	; 64
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//ADMUX |=(1 << REFS0);	//Selects Vref(pag 257)//AVcc= 5v & Aref= with capacitor to GND
	ADCSRA |= 1 << ADIE;	//enable ADC interrupts
     34c:	80 81       	ld	r24, Z
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	80 83       	st	Z, r24
	ADCSRA |= 1 << ADSC;	//start conversionD
     352:	80 81       	ld	r24, Z
     354:	80 64       	ori	r24, 0x40	; 64
     356:	80 83       	st	Z, r24
     358:	08 95       	ret

0000035a <__vector_23>:
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	2f 93       	push	r18
     366:	3f 93       	push	r19
     368:	4f 93       	push	r20
     36a:	5f 93       	push	r21
     36c:	6f 93       	push	r22
     36e:	7f 93       	push	r23
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	af 93       	push	r26
     376:	bf 93       	push	r27
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
     37c:	62 e0       	ldi	r22, 0x02	; 2
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 22 03 	call	0x644	; 0x644 <lcd_i2c_col_row>
     384:	8b e4       	ldi	r24, 0x4B	; 75
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 36 03 	call	0x66c	; 0x66c <lcd_i2c_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	83 ec       	ldi	r24, 0xC3	; 195
     390:	99 e0       	ldi	r25, 0x09	; 9
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <__vector_23+0x38>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <__vector_23+0x42>
     39c:	00 00       	nop
     39e:	0e 94 2c 03 	call	0x658	; 0x658 <lcd_i2c_clr>
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <init_analog_comp>:
     3c4:	80 b7       	in	r24, 0x30	; 48
     3c6:	83 60       	ori	r24, 0x03	; 3
     3c8:	80 bf       	out	0x30, r24	; 48
     3ca:	80 b7       	in	r24, 0x30	; 48
     3cc:	88 60       	ori	r24, 0x08	; 8
     3ce:	80 bf       	out	0x30, r24	; 48
     3d0:	08 95       	ret

000003d2 <__vector_1>:
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	2f 93       	push	r18
     3de:	3f 93       	push	r19
     3e0:	4f 93       	push	r20
     3e2:	5f 93       	push	r21
     3e4:	6f 93       	push	r22
     3e6:	7f 93       	push	r23
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 22 03 	call	0x644	; 0x644 <lcd_i2c_col_row>
     3fc:	86 e5       	ldi	r24, 0x56	; 86
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 36 03 	call	0x66c	; 0x66c <lcd_i2c_write_string>
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	83 ec       	ldi	r24, 0xC3	; 195
     408:	99 e0       	ldi	r25, 0x09	; 9
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	80 40       	sbci	r24, 0x00	; 0
     40e:	90 40       	sbci	r25, 0x00	; 0
     410:	e1 f7       	brne	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     414:	00 00       	nop
     416:	0e 94 2c 03 	call	0x658	; 0x658 <lcd_i2c_clr>
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <__vector_2>:
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	0f 92       	push	r0
     444:	11 24       	eor	r1, r1
     446:	2f 93       	push	r18
     448:	3f 93       	push	r19
     44a:	4f 93       	push	r20
     44c:	5f 93       	push	r21
     44e:	6f 93       	push	r22
     450:	7f 93       	push	r23
     452:	8f 93       	push	r24
     454:	9f 93       	push	r25
     456:	af 93       	push	r26
     458:	bf 93       	push	r27
     45a:	ef 93       	push	r30
     45c:	ff 93       	push	r31
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 22 03 	call	0x644	; 0x644 <lcd_i2c_col_row>
     466:	8b e5       	ldi	r24, 0x5B	; 91
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 36 03 	call	0x66c	; 0x66c <lcd_i2c_write_string>
     46e:	2f ef       	ldi	r18, 0xFF	; 255
     470:	83 ec       	ldi	r24, 0xC3	; 195
     472:	99 e0       	ldi	r25, 0x09	; 9
     474:	21 50       	subi	r18, 0x01	; 1
     476:	80 40       	sbci	r24, 0x00	; 0
     478:	90 40       	sbci	r25, 0x00	; 0
     47a:	e1 f7       	brne	.-8      	; 0x474 <__vector_2+0x38>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__vector_2+0x42>
     47e:	00 00       	nop
     480:	0e 94 2c 03 	call	0x658	; 0x658 <lcd_i2c_clr>
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	7f 91       	pop	r23
     492:	6f 91       	pop	r22
     494:	5f 91       	pop	r21
     496:	4f 91       	pop	r20
     498:	3f 91       	pop	r19
     49a:	2f 91       	pop	r18
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <init_ext_int>:
     4a6:	e9 e6       	ldi	r30, 0x69	; 105
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8a 60       	ori	r24, 0x0A	; 10
     4ae:	80 83       	st	Z, r24
     4b0:	8d b3       	in	r24, 0x1d	; 29
     4b2:	83 60       	ori	r24, 0x03	; 3
     4b4:	8d bb       	out	0x1d, r24	; 29
     4b6:	08 95       	ret

000004b8 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
     4b8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
     4bc:	84 e1       	ldi	r24, 0x14	; 20
     4be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Enable TWI
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4c8:	08 95       	ret

000004ca <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
     4ca:	84 ea       	ldi	r24, 0xA4	; 164
     4cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
     4d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4d4:	88 23       	and	r24, r24
     4d6:	e4 f7       	brge	.-8      	; 0x4d0 <start+0x6>
}
     4d8:	08 95       	ret

000004da <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
     4da:	84 e9       	ldi	r24, 0x94	; 148
     4dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4e0:	8f e9       	ldi	r24, 0x9F	; 159
     4e2:	9f e0       	ldi	r25, 0x0F	; 15
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <stop+0xa>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <stop+0x10>
     4ea:	00 00       	nop
     4ec:	08 95       	ret

000004ee <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
     4ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with acknowledge (TWEA=1)
     4f2:	84 ec       	ldi	r24, 0xC4	; 196
     4f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
     4f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4fc:	88 23       	and	r24, r24
     4fe:	e4 f7       	brge	.-8      	; 0x4f8 <write_i2c+0xa>
}
     500:	08 95       	ret

00000502 <lcd_i2c_reset>:
     502:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
     506:	80 e7       	ldi	r24, 0x70	; 112
     508:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	89 ef       	ldi	r24, 0xF9	; 249
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <lcd_i2c_reset+0x16>
     520:	00 c0       	rjmp	.+0      	; 0x522 <lcd_i2c_reset+0x20>
     522:	00 00       	nop
     524:	84 e3       	ldi	r24, 0x34	; 52
     526:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     52a:	80 e3       	ldi	r24, 0x30	; 48
     52c:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     530:	8f e3       	ldi	r24, 0x3F	; 63
     532:	9c e9       	ldi	r25, 0x9C	; 156
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <lcd_i2c_reset+0x32>
     538:	00 c0       	rjmp	.+0      	; 0x53a <lcd_i2c_reset+0x38>
     53a:	00 00       	nop
     53c:	84 e3       	ldi	r24, 0x34	; 52
     53e:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     542:	80 e3       	ldi	r24, 0x30	; 48
     544:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     548:	8f e9       	ldi	r24, 0x9F	; 159
     54a:	9f e0       	ldi	r25, 0x0F	; 15
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <lcd_i2c_reset+0x4a>
     550:	00 c0       	rjmp	.+0      	; 0x552 <lcd_i2c_reset+0x50>
     552:	00 00       	nop
     554:	84 e3       	ldi	r24, 0x34	; 52
     556:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     560:	8f e9       	ldi	r24, 0x9F	; 159
     562:	9f e0       	ldi	r25, 0x0F	; 15
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <lcd_i2c_reset+0x62>
     568:	00 c0       	rjmp	.+0      	; 0x56a <lcd_i2c_reset+0x68>
     56a:	00 00       	nop
     56c:	84 e2       	ldi	r24, 0x24	; 36
     56e:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     578:	8f e9       	ldi	r24, 0x9F	; 159
     57a:	9f e0       	ldi	r25, 0x0F	; 15
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_i2c_reset+0x7a>
     580:	00 c0       	rjmp	.+0      	; 0x582 <lcd_i2c_reset+0x80>
     582:	00 00       	nop
     584:	0e 94 6d 02 	call	0x4da	; 0x4da <stop>
     588:	08 95       	ret

0000058a <lcd_i2c_cmd>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	c8 2f       	mov	r28, r24
     590:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
     594:	80 e7       	ldi	r24, 0x70	; 112
     596:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     59a:	dc 2f       	mov	r29, r28
     59c:	d0 7f       	andi	r29, 0xF0	; 240
     59e:	8d 2f       	mov	r24, r29
     5a0:	8c 60       	ori	r24, 0x0C	; 12
     5a2:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     5a6:	8d 2f       	mov	r24, r29
     5a8:	88 60       	ori	r24, 0x08	; 8
     5aa:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	c8 9f       	mul	r28, r24
     5b2:	e0 01       	movw	r28, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	8c 2f       	mov	r24, r28
     5b8:	8c 60       	ori	r24, 0x0C	; 12
     5ba:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     5be:	8c 2f       	mov	r24, r28
     5c0:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     5c4:	0e 94 6d 02 	call	0x4da	; 0x4da <stop>
     5c8:	8f e3       	ldi	r24, 0x3F	; 63
     5ca:	9f e1       	ldi	r25, 0x1F	; 31
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_i2c_cmd+0x42>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <lcd_i2c_cmd+0x48>
     5d2:	00 00       	nop
     5d4:	8f e3       	ldi	r24, 0x3F	; 63
     5d6:	9f e1       	ldi	r25, 0x1F	; 31
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_i2c_cmd+0x4e>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcd_i2c_cmd+0x54>
     5de:	00 00       	nop
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <lcd_i2c_data>:
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	c8 2f       	mov	r28, r24
     5ec:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
     5f0:	80 e7       	ldi	r24, 0x70	; 112
     5f2:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     5f6:	dc 2f       	mov	r29, r28
     5f8:	d0 7f       	andi	r29, 0xF0	; 240
     5fa:	8d 2f       	mov	r24, r29
     5fc:	8d 60       	ori	r24, 0x0D	; 13
     5fe:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     602:	8d 2f       	mov	r24, r29
     604:	89 60       	ori	r24, 0x09	; 9
     606:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     60a:	80 e1       	ldi	r24, 0x10	; 16
     60c:	c8 9f       	mul	r28, r24
     60e:	e0 01       	movw	r28, r0
     610:	11 24       	eor	r1, r1
     612:	8c 2f       	mov	r24, r28
     614:	8d 60       	ori	r24, 0x0D	; 13
     616:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     61a:	8c 2f       	mov	r24, r28
     61c:	89 60       	ori	r24, 0x09	; 9
     61e:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
     622:	0e 94 6d 02 	call	0x4da	; 0x4da <stop>
     626:	8f e3       	ldi	r24, 0x3F	; 63
     628:	9f e1       	ldi	r25, 0x1F	; 31
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_i2c_data+0x44>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <lcd_i2c_data+0x4a>
     630:	00 00       	nop
     632:	8f e3       	ldi	r24, 0x3F	; 63
     634:	9f e1       	ldi	r25, 0x1F	; 31
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <lcd_i2c_data+0x50>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <lcd_i2c_data+0x56>
     63c:	00 00       	nop
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <lcd_i2c_col_row>:
     644:	e6 2f       	mov	r30, r22
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	ef 5f       	subi	r30, 0xFF	; 255
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	90 81       	ld	r25, Z
     64e:	89 0f       	add	r24, r25
     650:	81 58       	subi	r24, 0x81	; 129
     652:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_i2c_cmd>
     656:	08 95       	ret

00000658 <lcd_i2c_clr>:
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	0e 94 c5 02 	call	0x58a	; 0x58a <lcd_i2c_cmd>
     65e:	8f e3       	ldi	r24, 0x3F	; 63
     660:	9f e1       	ldi	r25, 0x1F	; 31
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <lcd_i2c_clr+0xa>
     666:	00 c0       	rjmp	.+0      	; 0x668 <lcd_i2c_clr+0x10>
     668:	00 00       	nop
     66a:	08 95       	ret

0000066c <lcd_i2c_write_string>:
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	8c 01       	movw	r16, r24
     676:	c0 e0       	ldi	r28, 0x00	; 0
     678:	d0 e0       	ldi	r29, 0x00	; 0
     67a:	03 c0       	rjmp	.+6      	; 0x682 <lcd_i2c_write_string+0x16>
     67c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_i2c_data>
     680:	21 96       	adiw	r28, 0x01	; 1
     682:	f8 01       	movw	r30, r16
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	80 81       	ld	r24, Z
     68a:	81 11       	cpse	r24, r1
     68c:	f7 cf       	rjmp	.-18     	; 0x67c <lcd_i2c_write_string+0x10>
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <main>:
#include <avr/interrupt.h>
#include "ssd_i2c.h"

int main(void)
{
    init_ports();
     698:	0e 94 5e 03 	call	0x6bc	; 0x6bc <init_ports>
	init_i2c();
     69c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <init_i2c>
	init_ext_int();
     6a0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_ext_int>
	init_analog_comp();
     6a4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <init_analog_comp>
	ssd_i2c_init();
     6a8:	0e 94 84 03 	call	0x708	; 0x708 <ssd_i2c_init>
	clear_screen();
     6ac:	0e 94 1b 07 	call	0xe36	; 0xe36 <clear_screen>
	graphic();
     6b0:	0e 94 c3 04 	call	0x986	; 0x986 <graphic>
	init_adc_withINT();
     6b4:	0e 94 9b 01 	call	0x336	; 0x336 <init_adc_withINT>

	/**********************************/
	sei(); /*enable general interrupts*/
     6b8:	78 94       	sei
     6ba:	ff cf       	rjmp	.-2      	; 0x6ba <main+0x22>

000006bc <init_ports>:
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	84 b9       	out	0x04, r24	; 4
     6c0:	8a b1       	in	r24, 0x0a	; 10
     6c2:	1a b8       	out	0x0a, r1	; 10
     6c4:	8b b1       	in	r24, 0x0b	; 11
     6c6:	8c 60       	ori	r24, 0x0C	; 12
     6c8:	8b b9       	out	0x0b, r24	; 11
     6ca:	17 b8       	out	0x07, r1	; 7
     6cc:	08 95       	ret

000006ce <ssd_i2c_cmd>:
	ssd_i2c_cmd(0xA4);		// Set all pixels OFF
	ssd_i2c_cmd(0xA6);		// Set display not inverted
	ssd_i2c_cmd(0xAF);		// Set display On
}

void ssd_i2c_cmd (char cmd){
     6ce:	cf 93       	push	r28
     6d0:	c8 2f       	mov	r28, r24
	
	start();	//START--> I2C
     6d2:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
	write_i2c(SSD1306_ADDRW);
     6d6:	88 e7       	ldi	r24, 0x78	; 120
     6d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	write_i2c(0x00);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	//I2C address writing 
	write_i2c(cmd);
     6e2:	8c 2f       	mov	r24, r28
     6e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	
	stop();	//STOP--> I2C
     6e8:	0e 94 6d 02 	call	0x4da	; 0x4da <stop>
     6ec:	8f e3       	ldi	r24, 0x3F	; 63
     6ee:	9f e1       	ldi	r25, 0x1F	; 31
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <ssd_i2c_cmd+0x22>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <ssd_i2c_cmd+0x28>
     6f6:	00 00       	nop
     6f8:	8f e3       	ldi	r24, 0x3F	; 63
     6fa:	9f e1       	ldi	r25, 0x1F	; 31
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <ssd_i2c_cmd+0x2e>
     700:	00 c0       	rjmp	.+0      	; 0x702 <ssd_i2c_cmd+0x34>
     702:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <ssd_i2c_init>:
#include "ssd_i2c.h"



void ssd_i2c_init (void){
	init_i2c();				//****init I2C****
     708:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <init_i2c>
	lcd_i2c_reset();		// Reset LCD.
     70c:	0e 94 81 02 	call	0x502	; 0x502 <lcd_i2c_reset>
	ssd_i2c_cmd(0xAE);		// Set display OFF
     710:	8e ea       	ldi	r24, 0xAE	; 174
     712:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xD4);		// Set Display Clock Divide Ratio / OSC Frequency
     716:	84 ed       	ldi	r24, 0xD4	; 212
     718:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x80);		// Display Clock Divide Ratio / OSC Frequency 
     71c:	80 e8       	ldi	r24, 0x80	; 128
     71e:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xA8);		// Set Multiplex Ratio
     722:	88 ea       	ldi	r24, 0xA8	; 168
     724:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x3F);		// Multiplex Ratio for 128x64 (64-1)
     728:	8f e3       	ldi	r24, 0x3F	; 63
     72a:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xD3);		 // Set Display Offset
     72e:	83 ed       	ldi	r24, 0xD3	; 211
     730:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x00);		// Display Offset
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x40);		 // Set Display Start Line
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x8D);		 // Set Charge Pump
     740:	8d e8       	ldi	r24, 0x8D	; 141
     742:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x14);		// Charge Pump (0x10 External, 0x14 Internal DC/DC)
     746:	84 e1       	ldi	r24, 0x14	; 20
     748:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xA1);		// Set Segment Re-Map
     74c:	81 ea       	ldi	r24, 0xA1	; 161
     74e:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xC8);		// Set Com Output Scan Direction
     752:	88 ec       	ldi	r24, 0xC8	; 200
     754:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xDA);		// Set COM Hardware Configuration
     758:	8a ed       	ldi	r24, 0xDA	; 218
     75a:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x12);		// COM Hardware Configuration
     75e:	82 e1       	ldi	r24, 0x12	; 18
     760:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x81);		// Set Contrast
     764:	81 e8       	ldi	r24, 0x81	; 129
     766:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x0F);		// Contrast
     76a:	8f e0       	ldi	r24, 0x0F	; 15
     76c:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xD9);		// Set Pre-Charge Period
     770:	89 ed       	ldi	r24, 0xD9	; 217
     772:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xF1);		// Set Pre-Charge Period (0x22 External, 0xF1 Internal)
     776:	81 ef       	ldi	r24, 0xF1	; 241
     778:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xDB);		// Set VCOMH Deselect Level
     77c:	8b ed       	ldi	r24, 0xDB	; 219
     77e:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0x40);		// VCOMH Deselect Level
     782:	80 e4       	ldi	r24, 0x40	; 64
     784:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xA4);		// Set all pixels OFF
     788:	84 ea       	ldi	r24, 0xA4	; 164
     78a:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xA6);		// Set display not inverted
     78e:	86 ea       	ldi	r24, 0xA6	; 166
     790:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
	ssd_i2c_cmd(0xAF);		// Set display On
     794:	8f ea       	ldi	r24, 0xAF	; 175
     796:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
     79a:	08 95       	ret

0000079c <ssd_write>:
	stop();	//STOP--> I2C
	_delay_ms(2);
	_delay_ms(2);
}

void ssd_write(uint8_t data){
     79c:	cf 93       	push	r28
     79e:	c8 2f       	mov	r28, r24
	
	start();	//START--> I2C
     7a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
	write_i2c(SSD1306_ADDRW);
     7a4:	88 e7       	ldi	r24, 0x78	; 120
     7a6:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	//I2C address writing
	write_i2c(0x40); //Set Display RAM line 
     7aa:	80 e4       	ldi	r24, 0x40	; 64
     7ac:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	write_i2c(data);
     7b0:	8c 2f       	mov	r24, r28
     7b2:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	stop();
     7b6:	0e 94 6d 02 	call	0x4da	; 0x4da <stop>
     7ba:	8f e3       	ldi	r24, 0x3F	; 63
     7bc:	9f e1       	ldi	r25, 0x1F	; 31
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <ssd_write+0x22>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <ssd_write+0x28>
     7c4:	00 00       	nop
     7c6:	8f e3       	ldi	r24, 0x3F	; 63
     7c8:	9f e1       	ldi	r25, 0x1F	; 31
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <ssd_write+0x2e>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <ssd_write+0x34>
     7d0:	00 00       	nop
	_delay_ms(2);
	_delay_ms(2);
}
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <set_cursor>:

void set_cursor(uint8_t x, uint8_t y){
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
	if((x<=0x07u) & (y<127)){
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	88 30       	cpi	r24, 0x08	; 8
     7de:	08 f0       	brcs	.+2      	; 0x7e2 <set_cursor+0xc>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	6f 37       	cpi	r22, 0x7F	; 127
     7e6:	08 f0       	brcs	.+2      	; 0x7ea <set_cursor+0x14>
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	92 23       	and	r25, r18
     7ec:	e1 f0       	breq	.+56     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     7ee:	d6 2f       	mov	r29, r22
     7f0:	c8 2f       	mov	r28, r24
		
		ssd_i2c_cmd(0x21); //Set column address range 0-127d
     7f2:	81 e2       	ldi	r24, 0x21	; 33
     7f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		ssd_i2c_cmd(y);
     7f8:	8d 2f       	mov	r24, r29
     7fa:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		ssd_i2c_cmd(127);
     7fe:	8f e7       	ldi	r24, 0x7F	; 127
     800:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		
		ssd_i2c_cmd(0x22); //Set page address, range 0-7d
     804:	82 e2       	ldi	r24, 0x22	; 34
     806:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		ssd_i2c_cmd(x);
     80a:	8c 2f       	mov	r24, r28
     80c:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		ssd_i2c_cmd(7);
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	0e 94 67 03 	call	0x6ce	; 0x6ce <ssd_i2c_cmd>
		
		start();
     816:	0e 94 65 02 	call	0x4ca	; 0x4ca <start>
		write_i2c(SSD1306_ADDRW);
     81a:	88 e7       	ldi	r24, 0x78	; 120
     81c:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
		write_i2c(0x40); //Set Display RAM line 
     820:	80 e4       	ldi	r24, 0x40	; 64
     822:	0e 94 77 02 	call	0x4ee	; 0x4ee <write_i2c>
	}
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <write_adc>:
	}
	
	write_adc();
}

void write_adc(void){
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	ef 97       	sbiw	r28, 0x3f	; 63
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	int i;
	const unsigned char adc[] = { //ADC0 =
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	e4 e0       	ldi	r30, 0x04	; 4
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	de 01       	movw	r26, r28
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	01 90       	ld	r0, Z+
     850:	0d 92       	st	X+, r0
     852:	8a 95       	dec	r24
     854:	e1 f7       	brne	.-8      	; 0x84e <write_adc+0x22>
		0x7C, 0x12, 0x11, 0x12, 0x7C,0x00,0x00,   // A
		0x7F, 0x41, 0x41, 0x22, 0x1C,0x00,0x00,   // D
		0x3E, 0x41, 0x41, 0x41, 0x22,0x00,0x00   // C
	};
	const unsigned char num0[] = {
     856:	8e e0       	ldi	r24, 0x0E	; 14
     858:	e9 e1       	ldi	r30, 0x19	; 25
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	de 01       	movw	r26, r28
     85e:	56 96       	adiw	r26, 0x16	; 22
     860:	01 90       	ld	r0, Z+
     862:	0d 92       	st	X+, r0
     864:	8a 95       	dec	r24
     866:	e1 f7       	brne	.-8      	; 0x860 <write_adc+0x34>
		0x3E, 0x51, 0x49, 0x45, 0x3E,0x00,0x00,  // 0
		0x14, 0x14, 0x14, 0x14, 0x14,0x00,0x00   // =
	};
	const unsigned char num1[] = {
     868:	8e e0       	ldi	r24, 0x0E	; 14
     86a:	e7 e2       	ldi	r30, 0x27	; 39
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	de 01       	movw	r26, r28
     870:	94 96       	adiw	r26, 0x24	; 36
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	8a 95       	dec	r24
     878:	e1 f7       	brne	.-8      	; 0x872 <write_adc+0x46>
		0x00, 0x42, 0x7F, 0x40, 0x00,0x00,0x00,   // 1
		0x14, 0x14, 0x14, 0x14, 0x14,0x00,0x00    // =
	};
	const unsigned char num2[] = {
     87a:	8e e0       	ldi	r24, 0x0E	; 14
     87c:	e5 e3       	ldi	r30, 0x35	; 53
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	de 01       	movw	r26, r28
     882:	d2 96       	adiw	r26, 0x32	; 50
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	8a 95       	dec	r24
     88a:	e1 f7       	brne	.-8      	; 0x884 <write_adc+0x58>
		0x42, 0x61, 0x51, 0x49, 0x46,0x00,0x00,  // 2
		0x14, 0x14, 0x14, 0x14, 0x14,0x00,0x00   // =
	};
	//type in the screen : ADC0
	set_cursor(0,60);
     88c:	6c e3       	ldi	r22, 0x3C	; 60
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
	
	for( int r = 0; r < 21; r++){
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0
     898:	0b c0       	rjmp	.+22     	; 0x8b0 <write_adc+0x84>
		ssd_write(adc[r]);
     89a:	e1 e0       	ldi	r30, 0x01	; 1
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ec 0f       	add	r30, r28
     8a0:	fd 1f       	adc	r31, r29
     8a2:	e0 0f       	add	r30, r16
     8a4:	f1 1f       	adc	r31, r17
     8a6:	80 81       	ld	r24, Z
     8a8:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
		0x14, 0x14, 0x14, 0x14, 0x14,0x00,0x00   // =
	};
	//type in the screen : ADC0
	set_cursor(0,60);
	
	for( int r = 0; r < 21; r++){
     8ac:	0f 5f       	subi	r16, 0xFF	; 255
     8ae:	1f 4f       	sbci	r17, 0xFF	; 255
     8b0:	05 31       	cpi	r16, 0x15	; 21
     8b2:	11 05       	cpc	r17, r1
     8b4:	94 f3       	brlt	.-28     	; 0x89a <write_adc+0x6e>
     8b6:	00 e0       	ldi	r16, 0x00	; 0
     8b8:	10 e0       	ldi	r17, 0x00	; 0
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <write_adc+0xa6>
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
		ssd_write(num0[i]);
     8bc:	e6 e1       	ldi	r30, 0x16	; 22
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	ec 0f       	add	r30, r28
     8c2:	fd 1f       	adc	r31, r29
     8c4:	e0 0f       	add	r30, r16
     8c6:	f1 1f       	adc	r31, r17
     8c8:	80 81       	ld	r24, Z
     8ca:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	set_cursor(0,60);
	
	for( int r = 0; r < 21; r++){
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
     8ce:	0f 5f       	subi	r16, 0xFF	; 255
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	0e 30       	cpi	r16, 0x0E	; 14
     8d4:	11 05       	cpc	r17, r1
     8d6:	94 f3       	brlt	.-28     	; 0x8bc <write_adc+0x90>
		ssd_write(num0[i]);
	}
	//type in the screen : ADC1
	set_cursor(1,60);
     8d8:	6c e3       	ldi	r22, 0x3C	; 60
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
	
	for( int r = 0; r < 21; r++){
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	0b c0       	rjmp	.+22     	; 0x8fc <write_adc+0xd0>
		ssd_write(adc[r]);
     8e6:	e1 e0       	ldi	r30, 0x01	; 1
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	ec 0f       	add	r30, r28
     8ec:	fd 1f       	adc	r31, r29
     8ee:	e0 0f       	add	r30, r16
     8f0:	f1 1f       	adc	r31, r17
     8f2:	80 81       	ld	r24, Z
     8f4:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
		ssd_write(num0[i]);
	}
	//type in the screen : ADC1
	set_cursor(1,60);
	
	for( int r = 0; r < 21; r++){
     8f8:	0f 5f       	subi	r16, 0xFF	; 255
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	05 31       	cpi	r16, 0x15	; 21
     8fe:	11 05       	cpc	r17, r1
     900:	94 f3       	brlt	.-28     	; 0x8e6 <write_adc+0xba>
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	0b c0       	rjmp	.+22     	; 0x91e <__stack+0x1f>
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
		ssd_write(num1[i]);
     908:	e4 e2       	ldi	r30, 0x24	; 36
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	e0 0f       	add	r30, r16
     912:	f1 1f       	adc	r31, r17
     914:	80 81       	ld	r24, Z
     916:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	set_cursor(1,60);
	
	for( int r = 0; r < 21; r++){
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
     91a:	0f 5f       	subi	r16, 0xFF	; 255
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	0e 30       	cpi	r16, 0x0E	; 14
     920:	11 05       	cpc	r17, r1
     922:	94 f3       	brlt	.-28     	; 0x908 <__stack+0x9>
		ssd_write(num1[i]);
	}
	//type in the screen : ADC2
	set_cursor(2,60);
     924:	6c e3       	ldi	r22, 0x3C	; 60
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
	
	for( int r = 0; r < 21; r++){
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	0b c0       	rjmp	.+22     	; 0x948 <__stack+0x49>
		ssd_write(adc[r]);
     932:	e1 e0       	ldi	r30, 0x01	; 1
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ec 0f       	add	r30, r28
     938:	fd 1f       	adc	r31, r29
     93a:	e0 0f       	add	r30, r16
     93c:	f1 1f       	adc	r31, r17
     93e:	80 81       	ld	r24, Z
     940:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
		ssd_write(num1[i]);
	}
	//type in the screen : ADC2
	set_cursor(2,60);
	
	for( int r = 0; r < 21; r++){
     944:	0f 5f       	subi	r16, 0xFF	; 255
     946:	1f 4f       	sbci	r17, 0xFF	; 255
     948:	05 31       	cpi	r16, 0x15	; 21
     94a:	11 05       	cpc	r17, r1
     94c:	94 f3       	brlt	.-28     	; 0x932 <__stack+0x33>
     94e:	00 e0       	ldi	r16, 0x00	; 0
     950:	10 e0       	ldi	r17, 0x00	; 0
     952:	0b c0       	rjmp	.+22     	; 0x96a <__stack+0x6b>
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
		ssd_write(num2[i]);
     954:	e2 e3       	ldi	r30, 0x32	; 50
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	ec 0f       	add	r30, r28
     95a:	fd 1f       	adc	r31, r29
     95c:	e0 0f       	add	r30, r16
     95e:	f1 1f       	adc	r31, r17
     960:	80 81       	ld	r24, Z
     962:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	set_cursor(2,60);
	
	for( int r = 0; r < 21; r++){
		ssd_write(adc[r]);
	}
	for( i = 0; i < 14 ; i++){
     966:	0f 5f       	subi	r16, 0xFF	; 255
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	0e 30       	cpi	r16, 0x0E	; 14
     96c:	11 05       	cpc	r17, r1
     96e:	94 f3       	brlt	.-28     	; 0x954 <__stack+0x55>
		ssd_write(num2[i]);
	}
	
}
     970:	ef 96       	adiw	r28, 0x3f	; 63
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <graphic>:
		write_i2c(0x40); //Set Display RAM line 
	}
}
const unsigned char volt[]={
0x1F, 0x20, 0x40, 0x20, 0x1F,0x00}; // V
void graphic(void){
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	28 97       	sbiw	r28, 0x08	; 8
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
	const unsigned char up[] = {0x80,0x80,0x40,0x60,0xF8,0x60,0x40,0x80};
     9a0:	88 e0       	ldi	r24, 0x08	; 8
     9a2:	e3 e4       	ldi	r30, 0x43	; 67
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	de 01       	movw	r26, r28
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	01 90       	ld	r0, Z+
     9ac:	0d 92       	st	X+, r0
     9ae:	8a 95       	dec	r24
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <graphic+0x24>
		set_cursor(0,0);
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>

	for( int r = 0; r < 21; r++){
     9ba:	00 e0       	ldi	r16, 0x00	; 0
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	08 c0       	rjmp	.+16     	; 0x9d0 <graphic+0x4a>
		ssd_write(volt[r]);
     9c0:	f8 01       	movw	r30, r16
     9c2:	e9 54       	subi	r30, 0x49	; 73
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	80 81       	ld	r24, Z
     9c8:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
0x1F, 0x20, 0x40, 0x20, 0x1F,0x00}; // V
void graphic(void){
	const unsigned char up[] = {0x80,0x80,0x40,0x60,0xF8,0x60,0x40,0x80};
		set_cursor(0,0);

	for( int r = 0; r < 21; r++){
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	05 31       	cpi	r16, 0x15	; 21
     9d2:	11 05       	cpc	r17, r1
     9d4:	ac f3       	brlt	.-22     	; 0x9c0 <graphic+0x3a>
		ssd_write(volt[r]);
	}
	set_cursor(0,10); //Arrow Graph 
     9d6:	6a e0       	ldi	r22, 0x0A	; 10
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
	for( int s = 0; s < 8; s++){
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	0b c0       	rjmp	.+22     	; 0x9fa <graphic+0x74>
		ssd_write(up[s]);
     9e4:	e1 e0       	ldi	r30, 0x01	; 1
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	ec 0f       	add	r30, r28
     9ea:	fd 1f       	adc	r31, r29
     9ec:	e0 0f       	add	r30, r16
     9ee:	f1 1f       	adc	r31, r17
     9f0:	80 81       	ld	r24, Z
     9f2:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>

	for( int r = 0; r < 21; r++){
		ssd_write(volt[r]);
	}
	set_cursor(0,10); //Arrow Graph 
	for( int s = 0; s < 8; s++){
     9f6:	0f 5f       	subi	r16, 0xFF	; 255
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	08 30       	cpi	r16, 0x08	; 8
     9fc:	11 05       	cpc	r17, r1
     9fe:	94 f3       	brlt	.-28     	; 0x9e4 <graphic+0x5e>
     a00:	ff 24       	eor	r15, r15
     a02:	f3 94       	inc	r15
     a04:	10 c0       	rjmp	.+32     	; 0xa26 <graphic+0xa0>
		ssd_write(up[s]);
	}
	
	for(uint8_t i=1;i<8;i++){ // Y axis 
		set_cursor(i,13);
     a06:	6d e0       	ldi	r22, 0x0D	; 13
     a08:	8f 2d       	mov	r24, r15
     a0a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
		for(int c = 0; c<2; c++){
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <graphic+0x98>
			ssd_write(0xFF);
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
		ssd_write(up[s]);
	}
	
	for(uint8_t i=1;i<8;i++){ // Y axis 
		set_cursor(i,13);
		for(int c = 0; c<2; c++){
     a1a:	0f 5f       	subi	r16, 0xFF	; 255
     a1c:	1f 4f       	sbci	r17, 0xFF	; 255
     a1e:	02 30       	cpi	r16, 0x02	; 2
     a20:	11 05       	cpc	r17, r1
     a22:	c4 f3       	brlt	.-16     	; 0xa14 <graphic+0x8e>
	set_cursor(0,10); //Arrow Graph 
	for( int s = 0; s < 8; s++){
		ssd_write(up[s]);
	}
	
	for(uint8_t i=1;i<8;i++){ // Y axis 
     a24:	f3 94       	inc	r15
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	8f 15       	cp	r24, r15
     a2a:	68 f7       	brcc	.-38     	; 0xa06 <graphic+0x80>
     a2c:	01 e0       	ldi	r16, 0x01	; 1
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <graphic+0xb6>
			ssd_write(0xFF);
		}
	}
	
	for(int u = 1; u<90; u++){ // X axis 
			ssd_write(0x40);
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
		for(int c = 0; c<2; c++){
			ssd_write(0xFF);
		}
	}
	
	for(int u = 1; u<90; u++){ // X axis 
     a38:	0f 5f       	subi	r16, 0xFF	; 255
     a3a:	1f 4f       	sbci	r17, 0xFF	; 255
     a3c:	0a 35       	cpi	r16, 0x5A	; 90
     a3e:	11 05       	cpc	r17, r1
     a40:	c4 f3       	brlt	.-16     	; 0xa32 <graphic+0xac>
			ssd_write(0x40);
		}
	ssd_write(0x48); // Second Arrow
     a42:	88 e4       	ldi	r24, 0x48	; 72
     a44:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	ssd_write(0x70);
     a48:	80 e7       	ldi	r24, 0x70	; 112
     a4a:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	ssd_write(0xE0);
     a4e:	80 ee       	ldi	r24, 0xE0	; 224
     a50:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	ssd_write(0x40);
     a54:	80 e4       	ldi	r24, 0x40	; 64
     a56:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	ssd_write(0x00);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	ssd_write(0x00);
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	static unsigned char LF[] ={
		0x48, 0x54, 0x54, 0x54, 0x20,0x00,0x00,   // sec
	    0x38, 0x54, 0x54, 0x54, 0x18,0x00,0x00,
		0x38, 0x44, 0x44, 0x44, 0x20,0x00,0x00
	};
	for( int r = 0; r < 21; r++){
     a66:	00 e0       	ldi	r16, 0x00	; 0
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <graphic+0xf6>
		ssd_write(LF[r]);
     a6c:	f8 01       	movw	r30, r16
     a6e:	e0 5a       	subi	r30, 0xA0	; 160
     a70:	fe 4f       	sbci	r31, 0xFE	; 254
     a72:	80 81       	ld	r24, Z
     a74:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	static unsigned char LF[] ={
		0x48, 0x54, 0x54, 0x54, 0x20,0x00,0x00,   // sec
	    0x38, 0x54, 0x54, 0x54, 0x18,0x00,0x00,
		0x38, 0x44, 0x44, 0x44, 0x20,0x00,0x00
	};
	for( int r = 0; r < 21; r++){
     a78:	0f 5f       	subi	r16, 0xFF	; 255
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	05 31       	cpi	r16, 0x15	; 21
     a7e:	11 05       	cpc	r17, r1
     a80:	ac f3       	brlt	.-22     	; 0xa6c <graphic+0xe6>
		ssd_write(LF[r]);
	}
	
	write_adc();
     a82:	0e 94 16 04 	call	0x82c	; 0x82c <write_adc>
}
     a86:	28 96       	adiw	r28, 0x08	; 8
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	08 95       	ret

00000a9e <ssd_num_write>:
0x00, 0x60, 0x60, 0x00, 0x00, 0x00}; //.

   


void ssd_num_write(char *dato, char adc_select){
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	8c 01       	movw	r16, r24
	char i = 0; 
	// This function simply changes the writing position of the voltage to be displayed on each adc
	if(adc_select==1){
     aa8:	61 30       	cpi	r22, 0x01	; 1
     aaa:	41 f4       	brne	.+16     	; 0xabc <ssd_num_write+0x1e>
		set_cursor(0,95);
     aac:	6f e5       	ldi	r22, 0x5F	; 95
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
		ssd_write(0x00);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     aba:	13 c0       	rjmp	.+38     	; 0xae2 <ssd_num_write+0x44>
	}else if(adc_select==2){
     abc:	62 30       	cpi	r22, 0x02	; 2
     abe:	41 f4       	brne	.+16     	; 0xad0 <ssd_num_write+0x32>
		set_cursor(1,95);
     ac0:	6f e5       	ldi	r22, 0x5F	; 95
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
		ssd_write(0x00);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <ssd_num_write+0x44>
	}else if(adc_select==3){
     ad0:	63 30       	cpi	r22, 0x03	; 3
     ad2:	39 f4       	brne	.+14     	; 0xae2 <ssd_num_write+0x44>
		set_cursor(2,95);
     ad4:	6f e5       	ldi	r22, 0x5F	; 95
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
		ssd_write(0x00);
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	9f c0       	rjmp	.+318    	; 0xc24 <ssd_num_write+0x186>
     ae6:	f8 01       	movw	r30, r16
     ae8:	ec 0f       	add	r30, r28
     aea:	f1 1d       	adc	r31, r1
     aec:	e0 81       	ld	r30, Z
     aee:	8e 2f       	mov	r24, r30
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	be 97       	sbiw	r30, 0x2e	; 46
     af6:	ec 30       	cpi	r30, 0x0C	; 12
     af8:	f1 05       	cpc	r31, r1
     afa:	08 f0       	brcs	.+2      	; 0xafe <ssd_num_write+0x60>
     afc:	92 c0       	rjmp	.+292    	; 0xc22 <ssd_num_write+0x184>
     afe:	ec 5c       	subi	r30, 0xCC	; 204
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__tablejump2__>
			case '0':
			for( char r = 0; r < 6; r++){
				ssd_write(n0[r]);
     b06:	ed 2f       	mov	r30, r29
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	ef 54       	subi	r30, 0x4F	; 79
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
			case '0':
			for( char r = 0; r < 6; r++){
     b14:	df 5f       	subi	r29, 0xFF	; 255
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <ssd_num_write+0x7c>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b18:	d0 e0       	ldi	r29, 0x00	; 0
			case '0':
			for( char r = 0; r < 6; r++){
     b1a:	d6 30       	cpi	r29, 0x06	; 6
     b1c:	a0 f3       	brcs	.-24     	; 0xb06 <ssd_num_write+0x68>
     b1e:	81 c0       	rjmp	.+258    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n0[r]);
			}
					break;
			case '1':
			for( char r = 0; r < 6; r++){
				ssd_write(n1[r]);
     b20:	ed 2f       	mov	r30, r29
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e5 55       	subi	r30, 0x55	; 85
     b26:	fe 4f       	sbci	r31, 0xFE	; 254
     b28:	80 81       	ld	r24, Z
     b2a:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n0[r]);
			}
					break;
			case '1':
			for( char r = 0; r < 6; r++){
     b2e:	df 5f       	subi	r29, 0xFF	; 255
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <ssd_num_write+0x96>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b32:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n0[r]);
			}
					break;
			case '1':
			for( char r = 0; r < 6; r++){
     b34:	d6 30       	cpi	r29, 0x06	; 6
     b36:	a0 f3       	brcs	.-24     	; 0xb20 <ssd_num_write+0x82>
     b38:	74 c0       	rjmp	.+232    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n1[r]);
			}
					break;
			case '2':
			for( char r = 0; r < 6; r++){
				ssd_write(n2[r]);
     b3a:	ed 2f       	mov	r30, r29
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	eb 55       	subi	r30, 0x5B	; 91
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	80 81       	ld	r24, Z
     b44:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n1[r]);
			}
					break;
			case '2':
			for( char r = 0; r < 6; r++){
     b48:	df 5f       	subi	r29, 0xFF	; 255
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <ssd_num_write+0xb0>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n1[r]);
			}
					break;
			case '2':
			for( char r = 0; r < 6; r++){
     b4e:	d6 30       	cpi	r29, 0x06	; 6
     b50:	a0 f3       	brcs	.-24     	; 0xb3a <ssd_num_write+0x9c>
     b52:	67 c0       	rjmp	.+206    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n2[r]);
			}
					break;
			case '3':
			for( char r = 0; r < 6; r++){
				ssd_write(n3[r]);
     b54:	ed 2f       	mov	r30, r29
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e1 56       	subi	r30, 0x61	; 97
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n2[r]);
			}
					break;
			case '3':
			for( char r = 0; r < 6; r++){
     b62:	df 5f       	subi	r29, 0xFF	; 255
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <ssd_num_write+0xca>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b66:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n2[r]);
			}
					break;
			case '3':
			for( char r = 0; r < 6; r++){
     b68:	d6 30       	cpi	r29, 0x06	; 6
     b6a:	a0 f3       	brcs	.-24     	; 0xb54 <ssd_num_write+0xb6>
     b6c:	5a c0       	rjmp	.+180    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n3[r]);
			}
					break;
			case '4':
			for( char r = 0; r < 6; r++){
				ssd_write(n4[r]);
     b6e:	ed 2f       	mov	r30, r29
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	e7 56       	subi	r30, 0x67	; 103
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	80 81       	ld	r24, Z
     b78:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n3[r]);
			}
					break;
			case '4':
			for( char r = 0; r < 6; r++){
     b7c:	df 5f       	subi	r29, 0xFF	; 255
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <ssd_num_write+0xe4>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b80:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n3[r]);
			}
					break;
			case '4':
			for( char r = 0; r < 6; r++){
     b82:	d6 30       	cpi	r29, 0x06	; 6
     b84:	a0 f3       	brcs	.-24     	; 0xb6e <ssd_num_write+0xd0>
     b86:	4d c0       	rjmp	.+154    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n4[r]);
			}
					break;
			case '5':
			for( char r = 0; r < 6; r++){
				ssd_write(n5[r]);
     b88:	ed 2f       	mov	r30, r29
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ed 56       	subi	r30, 0x6D	; 109
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 81       	ld	r24, Z
     b92:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n4[r]);
			}
					break;
			case '5':
			for( char r = 0; r < 6; r++){
     b96:	df 5f       	subi	r29, 0xFF	; 255
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <ssd_num_write+0xfe>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n4[r]);
			}
					break;
			case '5':
			for( char r = 0; r < 6; r++){
     b9c:	d6 30       	cpi	r29, 0x06	; 6
     b9e:	a0 f3       	brcs	.-24     	; 0xb88 <ssd_num_write+0xea>
     ba0:	40 c0       	rjmp	.+128    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n5[r]);
			}
					break;
			case '6':
			for( char r = 0; r < 6; r++){
				ssd_write(n6[r]);
     ba2:	ed 2f       	mov	r30, r29
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e3 57       	subi	r30, 0x73	; 115
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 81       	ld	r24, Z
     bac:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n5[r]);
			}
					break;
			case '6':
			for( char r = 0; r < 6; r++){
     bb0:	df 5f       	subi	r29, 0xFF	; 255
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <ssd_num_write+0x118>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     bb4:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n5[r]);
			}
					break;
			case '6':
			for( char r = 0; r < 6; r++){
     bb6:	d6 30       	cpi	r29, 0x06	; 6
     bb8:	a0 f3       	brcs	.-24     	; 0xba2 <ssd_num_write+0x104>
     bba:	33 c0       	rjmp	.+102    	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n6[r]);
			}
					break;
			case '7':
			for( char r = 0; r < 6; r++){
				ssd_write(n7[r]);
     bbc:	ed 2f       	mov	r30, r29
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e9 57       	subi	r30, 0x79	; 121
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	80 81       	ld	r24, Z
     bc6:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n6[r]);
			}
					break;
			case '7':
			for( char r = 0; r < 6; r++){
     bca:	df 5f       	subi	r29, 0xFF	; 255
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <ssd_num_write+0x132>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n6[r]);
			}
					break;
			case '7':
			for( char r = 0; r < 6; r++){
     bd0:	d6 30       	cpi	r29, 0x06	; 6
     bd2:	a0 f3       	brcs	.-24     	; 0xbbc <ssd_num_write+0x11e>
     bd4:	26 c0       	rjmp	.+76     	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n7[r]);
			}
					break;
			case '8':
			for( char r = 0; r < 6; r++){
				ssd_write(n8[r]);
     bd6:	ed 2f       	mov	r30, r29
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ef 57       	subi	r30, 0x7F	; 127
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n7[r]);
			}
					break;
			case '8':
			for( char r = 0; r < 6; r++){
     be4:	df 5f       	subi	r29, 0xFF	; 255
     be6:	01 c0       	rjmp	.+2      	; 0xbea <ssd_num_write+0x14c>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     be8:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n7[r]);
			}
					break;
			case '8':
			for( char r = 0; r < 6; r++){
     bea:	d6 30       	cpi	r29, 0x06	; 6
     bec:	a0 f3       	brcs	.-24     	; 0xbd6 <ssd_num_write+0x138>
     bee:	19 c0       	rjmp	.+50     	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n8[r]);
			}
					break;
			case '9':
			for( char r = 0; r < 6; r++){
				ssd_write(n9[r]);
     bf0:	ed 2f       	mov	r30, r29
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	e5 58       	subi	r30, 0x85	; 133
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n8[r]);
			}
					break;
			case '9':
			for( char r = 0; r < 6; r++){
     bfe:	df 5f       	subi	r29, 0xFF	; 255
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <ssd_num_write+0x166>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     c02:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n8[r]);
			}
					break;
			case '9':
			for( char r = 0; r < 6; r++){
     c04:	d6 30       	cpi	r29, 0x06	; 6
     c06:	a0 f3       	brcs	.-24     	; 0xbf0 <ssd_num_write+0x152>
     c08:	0c c0       	rjmp	.+24     	; 0xc22 <ssd_num_write+0x184>
				ssd_write(n9[r]);
			}
					break;
			case '.':
			for( char r = 0; r < 6; r++){
				ssd_write(dot[r]);
     c0a:	ed 2f       	mov	r30, r29
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	eb 58       	subi	r30, 0x8B	; 139
     c10:	fe 4f       	sbci	r31, 0xFE	; 254
     c12:	80 81       	ld	r24, Z
     c14:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
			for( char r = 0; r < 6; r++){
				ssd_write(n9[r]);
			}
					break;
			case '.':
			for( char r = 0; r < 6; r++){
     c18:	df 5f       	subi	r29, 0xFF	; 255
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <ssd_num_write+0x180>
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
		switch(dato[i]){
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
			for( char r = 0; r < 6; r++){
				ssd_write(n9[r]);
			}
					break;
			case '.':
			for( char r = 0; r < 6; r++){
     c1e:	d6 30       	cpi	r29, 0x06	; 6
     c20:	a0 f3       	brcs	.-24     	; 0xc0a <ssd_num_write+0x16c>
	}else if(adc_select==3){
		set_cursor(2,95);
		ssd_write(0x00);
	}
	
	for(i=0; i<4; i++){
     c22:	cf 5f       	subi	r28, 0xFF	; 255
     c24:	c4 30       	cpi	r28, 0x04	; 4
     c26:	08 f4       	brcc	.+2      	; 0xc2a <ssd_num_write+0x18c>
     c28:	5e cf       	rjmp	.-324    	; 0xae6 <ssd_num_write+0x48>
     c2a:	c0 e0       	ldi	r28, 0x00	; 0
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <ssd_num_write+0x1a0>
			}
					break;
		}
	}
	for( char r = 0; r < 6; r++){
	ssd_write(volt[r]);}
     c2e:	ec 2f       	mov	r30, r28
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	e9 54       	subi	r30, 0x49	; 73
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	80 81       	ld	r24, Z
     c38:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
				ssd_write(dot[r]);
			}
					break;
		}
	}
	for( char r = 0; r < 6; r++){
     c3c:	cf 5f       	subi	r28, 0xFF	; 255
     c3e:	c6 30       	cpi	r28, 0x06	; 6
     c40:	b0 f3       	brcs	.-20     	; 0xc2e <ssd_num_write+0x190>
	ssd_write(volt[r]);}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <clear_graph>:



void clear_graph(char status){
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
	if(status == 1){
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	c1 f4       	brne	.+48     	; 0xc88 <clear_graph+0x3c>
     c58:	12 c0       	rjmp	.+36     	; 0xc7e <clear_graph+0x32>
		int i,j;
		for(i=0; i<3; i++){
			set_cursor(6-i,15);
     c5a:	6f e0       	ldi	r22, 0x0F	; 15
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	80 1b       	sub	r24, r16
     c60:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
			for(j=0;j<90;j++){
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <clear_graph+0x26>
				ssd_write(0x00);
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
void clear_graph(char status){
	if(status == 1){
		int i,j;
		for(i=0; i<3; i++){
			set_cursor(6-i,15);
			for(j=0;j<90;j++){
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	ca 35       	cpi	r28, 0x5A	; 90
     c74:	d1 05       	cpc	r29, r1
     c76:	cc f3       	brlt	.-14     	; 0xc6a <clear_graph+0x1e>


void clear_graph(char status){
	if(status == 1){
		int i,j;
		for(i=0; i<3; i++){
     c78:	0f 5f       	subi	r16, 0xFF	; 255
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <clear_graph+0x36>
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	10 e0       	ldi	r17, 0x00	; 0
     c82:	03 30       	cpi	r16, 0x03	; 3
     c84:	11 05       	cpc	r17, r1
     c86:	4c f3       	brlt	.-46     	; 0xc5a <clear_graph+0xe>
			for(j=0;j<90;j++){
				ssd_write(0x00);
			}
		}	
	}
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <graph_volt>:

void graph_volt(float voltage, char loc, char lvl){ //El loc me lo define el contador que se encuentra en adc.c 
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	6b 01       	movw	r12, r22
     c9c:	7c 01       	movw	r14, r24
	loc = loc + 15; 
     c9e:	6f e0       	ldi	r22, 0x0F	; 15
     ca0:	64 0f       	add	r22, r20
	set_cursor(3+lvl,loc);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	82 0f       	add	r24, r18
     ca6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
	ssd_write(0x00);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	if( voltage > 0.0 && voltage < 0.6 ){
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	c7 01       	movw	r24, r14
     cb8:	b6 01       	movw	r22, r12
     cba:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     cbe:	18 16       	cp	r1, r24
     cc0:	74 f4       	brge	.+28     	; 0xcde <graph_volt+0x4c>
     cc2:	2a e9       	ldi	r18, 0x9A	; 154
     cc4:	39 e9       	ldi	r19, 0x99	; 153
     cc6:	49 e1       	ldi	r20, 0x19	; 25
     cc8:	5f e3       	ldi	r21, 0x3F	; 63
     cca:	c7 01       	movw	r24, r14
     ccc:	b6 01       	movw	r22, r12
     cce:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     cd2:	88 23       	and	r24, r24
     cd4:	24 f4       	brge	.+8      	; 0xcde <graph_volt+0x4c>
		ssd_write(0x80);
     cd6:	80 e8       	ldi	r24, 0x80	; 128
     cd8:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     cdc:	a7 c0       	rjmp	.+334    	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 0.6 && voltage < 1.2){
     cde:	2a e9       	ldi	r18, 0x9A	; 154
     ce0:	39 e9       	ldi	r19, 0x99	; 153
     ce2:	49 e1       	ldi	r20, 0x19	; 25
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     cee:	18 16       	cp	r1, r24
     cf0:	74 f4       	brge	.+28     	; 0xd0e <graph_volt+0x7c>
     cf2:	2a e9       	ldi	r18, 0x9A	; 154
     cf4:	39 e9       	ldi	r19, 0x99	; 153
     cf6:	49 e9       	ldi	r20, 0x99	; 153
     cf8:	5f e3       	ldi	r21, 0x3F	; 63
     cfa:	c7 01       	movw	r24, r14
     cfc:	b6 01       	movw	r22, r12
     cfe:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	24 f4       	brge	.+8      	; 0xd0e <graph_volt+0x7c>
		ssd_write(0x40);
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     d0c:	8f c0       	rjmp	.+286    	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 1.2 && voltage < 1.8){
     d0e:	2a e9       	ldi	r18, 0x9A	; 154
     d10:	39 e9       	ldi	r19, 0x99	; 153
     d12:	49 e9       	ldi	r20, 0x99	; 153
     d14:	5f e3       	ldi	r21, 0x3F	; 63
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     d1e:	18 16       	cp	r1, r24
     d20:	74 f4       	brge	.+28     	; 0xd3e <graph_volt+0xac>
     d22:	26 e6       	ldi	r18, 0x66	; 102
     d24:	36 e6       	ldi	r19, 0x66	; 102
     d26:	46 ee       	ldi	r20, 0xE6	; 230
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     d32:	88 23       	and	r24, r24
     d34:	24 f4       	brge	.+8      	; 0xd3e <graph_volt+0xac>
		ssd_write(0x20);
     d36:	80 e2       	ldi	r24, 0x20	; 32
     d38:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     d3c:	77 c0       	rjmp	.+238    	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 1.8 && voltage < 2.5){
     d3e:	26 e6       	ldi	r18, 0x66	; 102
     d40:	36 e6       	ldi	r19, 0x66	; 102
     d42:	46 ee       	ldi	r20, 0xE6	; 230
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	c7 01       	movw	r24, r14
     d48:	b6 01       	movw	r22, r12
     d4a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     d4e:	18 16       	cp	r1, r24
     d50:	74 f4       	brge	.+28     	; 0xd6e <graph_volt+0xdc>
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	50 e4       	ldi	r21, 0x40	; 64
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     d62:	88 23       	and	r24, r24
     d64:	24 f4       	brge	.+8      	; 0xd6e <graph_volt+0xdc>
		ssd_write(0x10);
     d66:	80 e1       	ldi	r24, 0x10	; 16
     d68:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     d6c:	5f c0       	rjmp	.+190    	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 2.5 && voltage < 3.1){
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	50 e4       	ldi	r21, 0x40	; 64
     d76:	c7 01       	movw	r24, r14
     d78:	b6 01       	movw	r22, r12
     d7a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     d7e:	18 16       	cp	r1, r24
     d80:	74 f4       	brge	.+28     	; 0xd9e <graph_volt+0x10c>
     d82:	26 e6       	ldi	r18, 0x66	; 102
     d84:	36 e6       	ldi	r19, 0x66	; 102
     d86:	46 e4       	ldi	r20, 0x46	; 70
     d88:	50 e4       	ldi	r21, 0x40	; 64
     d8a:	c7 01       	movw	r24, r14
     d8c:	b6 01       	movw	r22, r12
     d8e:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	24 f4       	brge	.+8      	; 0xd9e <graph_volt+0x10c>
		ssd_write(0x08);
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     d9c:	47 c0       	rjmp	.+142    	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 3.1 && voltage < 3.7){
     d9e:	26 e6       	ldi	r18, 0x66	; 102
     da0:	36 e6       	ldi	r19, 0x66	; 102
     da2:	46 e4       	ldi	r20, 0x46	; 70
     da4:	50 e4       	ldi	r21, 0x40	; 64
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     dae:	18 16       	cp	r1, r24
     db0:	74 f4       	brge	.+28     	; 0xdce <graph_volt+0x13c>
     db2:	2d ec       	ldi	r18, 0xCD	; 205
     db4:	3c ec       	ldi	r19, 0xCC	; 204
     db6:	4c e6       	ldi	r20, 0x6C	; 108
     db8:	50 e4       	ldi	r21, 0x40	; 64
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     dc2:	88 23       	and	r24, r24
     dc4:	24 f4       	brge	.+8      	; 0xdce <graph_volt+0x13c>
		ssd_write(0x04);
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     dcc:	2f c0       	rjmp	.+94     	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 3.7 && voltage < 4.3){
     dce:	2d ec       	ldi	r18, 0xCD	; 205
     dd0:	3c ec       	ldi	r19, 0xCC	; 204
     dd2:	4c e6       	ldi	r20, 0x6C	; 108
     dd4:	50 e4       	ldi	r21, 0x40	; 64
     dd6:	c7 01       	movw	r24, r14
     dd8:	b6 01       	movw	r22, r12
     dda:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     dde:	18 16       	cp	r1, r24
     de0:	74 f4       	brge	.+28     	; 0xdfe <graph_volt+0x16c>
     de2:	2a e9       	ldi	r18, 0x9A	; 154
     de4:	39 e9       	ldi	r19, 0x99	; 153
     de6:	49 e8       	ldi	r20, 0x89	; 137
     de8:	50 e4       	ldi	r21, 0x40	; 64
     dea:	c7 01       	movw	r24, r14
     dec:	b6 01       	movw	r22, r12
     dee:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     df2:	88 23       	and	r24, r24
     df4:	24 f4       	brge	.+8      	; 0xdfe <graph_volt+0x16c>
		ssd_write(0x02);
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
     dfc:	17 c0       	rjmp	.+46     	; 0xe2c <graph_volt+0x19a>
	}
	else if( voltage > 4. && voltage < 6){
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	50 e4       	ldi	r21, 0x40	; 64
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__gesf2>
     e0e:	18 16       	cp	r1, r24
     e10:	6c f4       	brge	.+26     	; 0xe2c <graph_volt+0x19a>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 ec       	ldi	r20, 0xC0	; 192
     e18:	50 e4       	ldi	r21, 0x40	; 64
     e1a:	c7 01       	movw	r24, r14
     e1c:	b6 01       	movw	r22, r12
     e1e:	0e 94 71 07 	call	0xee2	; 0xee2 <__cmpsf2>
     e22:	88 23       	and	r24, r24
     e24:	1c f4       	brge	.+6      	; 0xe2c <graph_volt+0x19a>
		ssd_write(0x01);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
	}

}
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	df 90       	pop	r13
     e32:	cf 90       	pop	r12
     e34:	08 95       	ret

00000e36 <clear_screen>:

void clear_screen(void){
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
	for(int i=0; i<=7; i++){
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	10 c0       	rjmp	.+32     	; 0xe64 <clear_screen+0x2e>
		set_cursor(i,0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	80 2f       	mov	r24, r16
     e48:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <set_cursor>
		for(int j=0;j<=127;j++){
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <clear_screen+0x24>
			ssd_write(0x00);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 ce 03 	call	0x79c	; 0x79c <ssd_write>
}

void clear_screen(void){
	for(int i=0; i<=7; i++){
		set_cursor(i,0);
		for(int j=0;j<=127;j++){
     e58:	21 96       	adiw	r28, 0x01	; 1
     e5a:	c0 38       	cpi	r28, 0x80	; 128
     e5c:	d1 05       	cpc	r29, r1
     e5e:	cc f3       	brlt	.-14     	; 0xe52 <clear_screen+0x1c>
	}

}

void clear_screen(void){
	for(int i=0; i<=7; i++){
     e60:	0f 5f       	subi	r16, 0xFF	; 255
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	08 30       	cpi	r16, 0x08	; 8
     e66:	11 05       	cpc	r17, r1
     e68:	6c f3       	brlt	.-38     	; 0xe44 <clear_screen+0xe>
		set_cursor(i,0);
		for(int j=0;j<=127;j++){
			ssd_write(0x00);
		}
	}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <usart_transmit>:
     e74:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e78:	95 ff       	sbrs	r25, 5
     e7a:	fc cf       	rjmp	.-8      	; 0xe74 <usart_transmit>
     e7c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e80:	08 95       	ret

00000e82 <__vector_18>:
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
     ea4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ea8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <usart_received_char>
     eac:	8d e2       	ldi	r24, 0x2D	; 45
     eae:	0e 94 3a 07 	call	0xe74	; 0xe74 <usart_transmit>
     eb2:	8e e3       	ldi	r24, 0x3E	; 62
     eb4:	0e 94 3a 07 	call	0xe74	; 0xe74 <usart_transmit>
     eb8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <usart_received_char>
     ebc:	0e 94 3a 07 	call	0xe74	; 0xe74 <usart_transmit>
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__cmpsf2>:
     ee2:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__cmpsf2+0x8>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret

00000eec <__divsf3>:
     eec:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3x>
     ef0:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
     ef4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
     ef8:	58 f0       	brcs	.+22     	; 0xf10 <__divsf3+0x24>
     efa:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
     efe:	40 f0       	brcs	.+16     	; 0xf10 <__divsf3+0x24>
     f00:	29 f4       	brne	.+10     	; 0xf0c <__divsf3+0x20>
     f02:	5f 3f       	cpi	r21, 0xFF	; 255
     f04:	29 f0       	breq	.+10     	; 0xf10 <__divsf3+0x24>
     f06:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     f0a:	51 11       	cpse	r21, r1
     f0c:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     f10:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>

00000f14 <__divsf3x>:
     f14:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
     f18:	68 f3       	brcs	.-38     	; 0xef4 <__divsf3+0x8>

00000f1a <__divsf3_pse>:
     f1a:	99 23       	and	r25, r25
     f1c:	b1 f3       	breq	.-20     	; 0xf0a <__divsf3+0x1e>
     f1e:	55 23       	and	r21, r21
     f20:	91 f3       	breq	.-28     	; 0xf06 <__divsf3+0x1a>
     f22:	95 1b       	sub	r25, r21
     f24:	55 0b       	sbc	r21, r21
     f26:	bb 27       	eor	r27, r27
     f28:	aa 27       	eor	r26, r26
     f2a:	62 17       	cp	r22, r18
     f2c:	73 07       	cpc	r23, r19
     f2e:	84 07       	cpc	r24, r20
     f30:	38 f0       	brcs	.+14     	; 0xf40 <__divsf3_pse+0x26>
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	44 1f       	adc	r20, r20
     f3c:	aa 1f       	adc	r26, r26
     f3e:	a9 f3       	breq	.-22     	; 0xf2a <__divsf3_pse+0x10>
     f40:	35 d0       	rcall	.+106    	; 0xfac <__divsf3_pse+0x92>
     f42:	0e 2e       	mov	r0, r30
     f44:	3a f0       	brmi	.+14     	; 0xf54 <__divsf3_pse+0x3a>
     f46:	e0 e8       	ldi	r30, 0x80	; 128
     f48:	32 d0       	rcall	.+100    	; 0xfae <__divsf3_pse+0x94>
     f4a:	91 50       	subi	r25, 0x01	; 1
     f4c:	50 40       	sbci	r21, 0x00	; 0
     f4e:	e6 95       	lsr	r30
     f50:	00 1c       	adc	r0, r0
     f52:	ca f7       	brpl	.-14     	; 0xf46 <__divsf3_pse+0x2c>
     f54:	2b d0       	rcall	.+86     	; 0xfac <__divsf3_pse+0x92>
     f56:	fe 2f       	mov	r31, r30
     f58:	29 d0       	rcall	.+82     	; 0xfac <__divsf3_pse+0x92>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	bb 1f       	adc	r27, r27
     f62:	26 17       	cp	r18, r22
     f64:	37 07       	cpc	r19, r23
     f66:	48 07       	cpc	r20, r24
     f68:	ab 07       	cpc	r26, r27
     f6a:	b0 e8       	ldi	r27, 0x80	; 128
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__divsf3_pse+0x56>
     f6e:	bb 0b       	sbc	r27, r27
     f70:	80 2d       	mov	r24, r0
     f72:	bf 01       	movw	r22, r30
     f74:	ff 27       	eor	r31, r31
     f76:	93 58       	subi	r25, 0x83	; 131
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	3a f0       	brmi	.+14     	; 0xf8a <__divsf3_pse+0x70>
     f7c:	9e 3f       	cpi	r25, 0xFE	; 254
     f7e:	51 05       	cpc	r21, r1
     f80:	78 f0       	brcs	.+30     	; 0xfa0 <__divsf3_pse+0x86>
     f82:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     f86:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     f8a:	5f 3f       	cpi	r21, 0xFF	; 255
     f8c:	e4 f3       	brlt	.-8      	; 0xf86 <__divsf3_pse+0x6c>
     f8e:	98 3e       	cpi	r25, 0xE8	; 232
     f90:	d4 f3       	brlt	.-12     	; 0xf86 <__divsf3_pse+0x6c>
     f92:	86 95       	lsr	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f7 95       	ror	r31
     f9c:	9f 5f       	subi	r25, 0xFF	; 255
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__divsf3_pse+0x78>
     fa0:	88 0f       	add	r24, r24
     fa2:	91 1d       	adc	r25, r1
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret
     fac:	e1 e0       	ldi	r30, 0x01	; 1
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	bb 1f       	adc	r27, r27
     fb6:	62 17       	cp	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	ba 07       	cpc	r27, r26
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__divsf3_pse+0xae>
     fc0:	62 1b       	sub	r22, r18
     fc2:	73 0b       	sbc	r23, r19
     fc4:	84 0b       	sbc	r24, r20
     fc6:	ba 0b       	sbc	r27, r26
     fc8:	ee 1f       	adc	r30, r30
     fca:	88 f7       	brcc	.-30     	; 0xfae <__divsf3_pse+0x94>
     fcc:	e0 95       	com	r30
     fce:	08 95       	ret

00000fd0 <__floatunsisf>:
     fd0:	e8 94       	clt
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <__floatsisf+0x12>

00000fd4 <__floatsisf>:
     fd4:	97 fb       	bst	r25, 7
     fd6:	3e f4       	brtc	.+14     	; 0xfe6 <__floatsisf+0x12>
     fd8:	90 95       	com	r25
     fda:	80 95       	com	r24
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	99 23       	and	r25, r25
     fe8:	a9 f0       	breq	.+42     	; 0x1014 <__floatsisf+0x40>
     fea:	f9 2f       	mov	r31, r25
     fec:	96 e9       	ldi	r25, 0x96	; 150
     fee:	bb 27       	eor	r27, r27
     ff0:	93 95       	inc	r25
     ff2:	f6 95       	lsr	r31
     ff4:	87 95       	ror	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f1 11       	cpse	r31, r1
     ffe:	f8 cf       	rjmp	.-16     	; 0xff0 <__floatsisf+0x1c>
    1000:	fa f4       	brpl	.+62     	; 0x1040 <__floatsisf+0x6c>
    1002:	bb 0f       	add	r27, r27
    1004:	11 f4       	brne	.+4      	; 0x100a <__floatsisf+0x36>
    1006:	60 ff       	sbrs	r22, 0
    1008:	1b c0       	rjmp	.+54     	; 0x1040 <__floatsisf+0x6c>
    100a:	6f 5f       	subi	r22, 0xFF	; 255
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	16 c0       	rjmp	.+44     	; 0x1040 <__floatsisf+0x6c>
    1014:	88 23       	and	r24, r24
    1016:	11 f0       	breq	.+4      	; 0x101c <__floatsisf+0x48>
    1018:	96 e9       	ldi	r25, 0x96	; 150
    101a:	11 c0       	rjmp	.+34     	; 0x103e <__floatsisf+0x6a>
    101c:	77 23       	and	r23, r23
    101e:	21 f0       	breq	.+8      	; 0x1028 <__floatsisf+0x54>
    1020:	9e e8       	ldi	r25, 0x8E	; 142
    1022:	87 2f       	mov	r24, r23
    1024:	76 2f       	mov	r23, r22
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <__floatsisf+0x5e>
    1028:	66 23       	and	r22, r22
    102a:	71 f0       	breq	.+28     	; 0x1048 <__floatsisf+0x74>
    102c:	96 e8       	ldi	r25, 0x86	; 134
    102e:	86 2f       	mov	r24, r22
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	2a f0       	brmi	.+10     	; 0x1040 <__floatsisf+0x6c>
    1036:	9a 95       	dec	r25
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	da f7       	brpl	.-10     	; 0x1036 <__floatsisf+0x62>
    1040:	88 0f       	add	r24, r24
    1042:	96 95       	lsr	r25
    1044:	87 95       	ror	r24
    1046:	97 f9       	bld	r25, 7
    1048:	08 95       	ret

0000104a <__fp_cmp>:
    104a:	99 0f       	add	r25, r25
    104c:	00 08       	sbc	r0, r0
    104e:	55 0f       	add	r21, r21
    1050:	aa 0b       	sbc	r26, r26
    1052:	e0 e8       	ldi	r30, 0x80	; 128
    1054:	fe ef       	ldi	r31, 0xFE	; 254
    1056:	16 16       	cp	r1, r22
    1058:	17 06       	cpc	r1, r23
    105a:	e8 07       	cpc	r30, r24
    105c:	f9 07       	cpc	r31, r25
    105e:	c0 f0       	brcs	.+48     	; 0x1090 <__fp_cmp+0x46>
    1060:	12 16       	cp	r1, r18
    1062:	13 06       	cpc	r1, r19
    1064:	e4 07       	cpc	r30, r20
    1066:	f5 07       	cpc	r31, r21
    1068:	98 f0       	brcs	.+38     	; 0x1090 <__fp_cmp+0x46>
    106a:	62 1b       	sub	r22, r18
    106c:	73 0b       	sbc	r23, r19
    106e:	84 0b       	sbc	r24, r20
    1070:	95 0b       	sbc	r25, r21
    1072:	39 f4       	brne	.+14     	; 0x1082 <__fp_cmp+0x38>
    1074:	0a 26       	eor	r0, r26
    1076:	61 f0       	breq	.+24     	; 0x1090 <__fp_cmp+0x46>
    1078:	23 2b       	or	r18, r19
    107a:	24 2b       	or	r18, r20
    107c:	25 2b       	or	r18, r21
    107e:	21 f4       	brne	.+8      	; 0x1088 <__fp_cmp+0x3e>
    1080:	08 95       	ret
    1082:	0a 26       	eor	r0, r26
    1084:	09 f4       	brne	.+2      	; 0x1088 <__fp_cmp+0x3e>
    1086:	a1 40       	sbci	r26, 0x01	; 1
    1088:	a6 95       	lsr	r26
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	81 1d       	adc	r24, r1
    108e:	81 1d       	adc	r24, r1
    1090:	08 95       	ret

00001092 <__fp_inf>:
    1092:	97 f9       	bld	r25, 7
    1094:	9f 67       	ori	r25, 0x7F	; 127
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	08 95       	ret

0000109e <__fp_nan>:
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	80 ec       	ldi	r24, 0xC0	; 192
    10a2:	08 95       	ret

000010a4 <__fp_pscA>:
    10a4:	00 24       	eor	r0, r0
    10a6:	0a 94       	dec	r0
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	09 06       	cpc	r0, r25
    10b0:	08 95       	ret

000010b2 <__fp_pscB>:
    10b2:	00 24       	eor	r0, r0
    10b4:	0a 94       	dec	r0
    10b6:	12 16       	cp	r1, r18
    10b8:	13 06       	cpc	r1, r19
    10ba:	14 06       	cpc	r1, r20
    10bc:	05 06       	cpc	r0, r21
    10be:	08 95       	ret

000010c0 <__fp_round>:
    10c0:	09 2e       	mov	r0, r25
    10c2:	03 94       	inc	r0
    10c4:	00 0c       	add	r0, r0
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0xc>
    10c8:	88 23       	and	r24, r24
    10ca:	52 f0       	brmi	.+20     	; 0x10e0 <__fp_round+0x20>
    10cc:	bb 0f       	add	r27, r27
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <__fp_round+0x20>
    10d0:	bf 2b       	or	r27, r31
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__fp_round+0x18>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__fp_round+0x20>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <__fp_split3>:
    10e2:	57 fd       	sbrc	r21, 7
    10e4:	90 58       	subi	r25, 0x80	; 128
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	59 f0       	breq	.+22     	; 0x1102 <__fp_splitA+0x10>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	71 f0       	breq	.+28     	; 0x110c <__fp_splitA+0x1a>
    10f0:	47 95       	ror	r20

000010f2 <__fp_splitA>:
    10f2:	88 0f       	add	r24, r24
    10f4:	97 fb       	bst	r25, 7
    10f6:	99 1f       	adc	r25, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <__fp_splitA+0x20>
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	79 f0       	breq	.+30     	; 0x111c <__fp_splitA+0x2a>
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	55 1f       	adc	r21, r21
    110a:	f2 cf       	rjmp	.-28     	; 0x10f0 <__fp_split3+0xe>
    110c:	46 95       	lsr	r20
    110e:	f1 df       	rcall	.-30     	; 0x10f2 <__fp_splitA>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <__fp_splitA+0x30>
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f1 cf       	rjmp	.-30     	; 0x10fe <__fp_splitA+0xc>
    111c:	86 95       	lsr	r24
    111e:	71 05       	cpc	r23, r1
    1120:	61 05       	cpc	r22, r1
    1122:	08 94       	sec
    1124:	08 95       	ret

00001126 <__fp_zero>:
    1126:	e8 94       	clt

00001128 <__fp_szero>:
    1128:	bb 27       	eor	r27, r27
    112a:	66 27       	eor	r22, r22
    112c:	77 27       	eor	r23, r23
    112e:	cb 01       	movw	r24, r22
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__gesf2>:
    1134:	0e 94 25 08 	call	0x104a	; 0x104a <__fp_cmp>
    1138:	08 f4       	brcc	.+2      	; 0x113c <__gesf2+0x8>
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	08 95       	ret

0000113e <__mulsf3>:
    113e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3x>
    1142:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
    1146:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
    114a:	38 f0       	brcs	.+14     	; 0x115a <__mulsf3+0x1c>
    114c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
    1150:	20 f0       	brcs	.+8      	; 0x115a <__mulsf3+0x1c>
    1152:	95 23       	and	r25, r21
    1154:	11 f0       	breq	.+4      	; 0x115a <__mulsf3+0x1c>
    1156:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    115a:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
    115e:	11 24       	eor	r1, r1
    1160:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>

00001164 <__mulsf3x>:
    1164:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
    1168:	70 f3       	brcs	.-36     	; 0x1146 <__mulsf3+0x8>

0000116a <__mulsf3_pse>:
    116a:	95 9f       	mul	r25, r21
    116c:	c1 f3       	breq	.-16     	; 0x115e <__mulsf3+0x20>
    116e:	95 0f       	add	r25, r21
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	55 1f       	adc	r21, r21
    1174:	62 9f       	mul	r22, r18
    1176:	f0 01       	movw	r30, r0
    1178:	72 9f       	mul	r23, r18
    117a:	bb 27       	eor	r27, r27
    117c:	f0 0d       	add	r31, r0
    117e:	b1 1d       	adc	r27, r1
    1180:	63 9f       	mul	r22, r19
    1182:	aa 27       	eor	r26, r26
    1184:	f0 0d       	add	r31, r0
    1186:	b1 1d       	adc	r27, r1
    1188:	aa 1f       	adc	r26, r26
    118a:	64 9f       	mul	r22, r20
    118c:	66 27       	eor	r22, r22
    118e:	b0 0d       	add	r27, r0
    1190:	a1 1d       	adc	r26, r1
    1192:	66 1f       	adc	r22, r22
    1194:	82 9f       	mul	r24, r18
    1196:	22 27       	eor	r18, r18
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	62 1f       	adc	r22, r18
    119e:	73 9f       	mul	r23, r19
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	62 1f       	adc	r22, r18
    11a6:	83 9f       	mul	r24, r19
    11a8:	a0 0d       	add	r26, r0
    11aa:	61 1d       	adc	r22, r1
    11ac:	22 1f       	adc	r18, r18
    11ae:	74 9f       	mul	r23, r20
    11b0:	33 27       	eor	r19, r19
    11b2:	a0 0d       	add	r26, r0
    11b4:	61 1d       	adc	r22, r1
    11b6:	23 1f       	adc	r18, r19
    11b8:	84 9f       	mul	r24, r20
    11ba:	60 0d       	add	r22, r0
    11bc:	21 1d       	adc	r18, r1
    11be:	82 2f       	mov	r24, r18
    11c0:	76 2f       	mov	r23, r22
    11c2:	6a 2f       	mov	r22, r26
    11c4:	11 24       	eor	r1, r1
    11c6:	9f 57       	subi	r25, 0x7F	; 127
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	9a f0       	brmi	.+38     	; 0x11f2 <__mulsf3_pse+0x88>
    11cc:	f1 f0       	breq	.+60     	; 0x120a <__mulsf3_pse+0xa0>
    11ce:	88 23       	and	r24, r24
    11d0:	4a f0       	brmi	.+18     	; 0x11e4 <__mulsf3_pse+0x7a>
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	bb 1f       	adc	r27, r27
    11d8:	66 1f       	adc	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	a9 f7       	brne	.-22     	; 0x11ce <__mulsf3_pse+0x64>
    11e4:	9e 3f       	cpi	r25, 0xFE	; 254
    11e6:	51 05       	cpc	r21, r1
    11e8:	80 f0       	brcs	.+32     	; 0x120a <__mulsf3_pse+0xa0>
    11ea:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    11ee:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	e4 f3       	brlt	.-8      	; 0x11ee <__mulsf3_pse+0x84>
    11f6:	98 3e       	cpi	r25, 0xE8	; 232
    11f8:	d4 f3       	brlt	.-12     	; 0x11ee <__mulsf3_pse+0x84>
    11fa:	86 95       	lsr	r24
    11fc:	77 95       	ror	r23
    11fe:	67 95       	ror	r22
    1200:	b7 95       	ror	r27
    1202:	f7 95       	ror	r31
    1204:	e7 95       	ror	r30
    1206:	9f 5f       	subi	r25, 0xFF	; 255
    1208:	c1 f7       	brne	.-16     	; 0x11fa <__mulsf3_pse+0x90>
    120a:	fe 2b       	or	r31, r30
    120c:	88 0f       	add	r24, r24
    120e:	91 1d       	adc	r25, r1
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__tablejump2__>:
    1218:	ee 0f       	add	r30, r30
    121a:	ff 1f       	adc	r31, r31
    121c:	05 90       	lpm	r0, Z+
    121e:	f4 91       	lpm	r31, Z
    1220:	e0 2d       	mov	r30, r0
    1222:	09 94       	ijmp

00001224 <dtostrf>:
    1224:	ef 92       	push	r14
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	e8 01       	movw	r28, r16
    1230:	47 fd       	sbrc	r20, 7
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <dtostrf+0x14>
    1234:	34 e0       	ldi	r19, 0x04	; 4
    1236:	01 c0       	rjmp	.+2      	; 0x123a <dtostrf+0x16>
    1238:	34 e1       	ldi	r19, 0x14	; 20
    123a:	04 2e       	mov	r0, r20
    123c:	00 0c       	add	r0, r0
    123e:	55 0b       	sbc	r21, r21
    1240:	57 ff       	sbrs	r21, 7
    1242:	03 c0       	rjmp	.+6      	; 0x124a <dtostrf+0x26>
    1244:	51 95       	neg	r21
    1246:	41 95       	neg	r20
    1248:	51 09       	sbc	r21, r1
    124a:	e3 2e       	mov	r14, r19
    124c:	02 2f       	mov	r16, r18
    124e:	24 2f       	mov	r18, r20
    1250:	ae 01       	movw	r20, r28
    1252:	0e 94 32 09 	call	0x1264	; 0x1264 <dtoa_prf>
    1256:	ce 01       	movw	r24, r28
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <dtoa_prf>:
    1264:	a9 e0       	ldi	r26, 0x09	; 9
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f9 e0       	ldi	r31, 0x09	; 9
    126c:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__prologue_saves__+0xc>
    1270:	6a 01       	movw	r12, r20
    1272:	12 2f       	mov	r17, r18
    1274:	b0 2e       	mov	r11, r16
    1276:	2b e3       	ldi	r18, 0x3B	; 59
    1278:	20 17       	cp	r18, r16
    127a:	20 f0       	brcs	.+8      	; 0x1284 <dtoa_prf+0x20>
    127c:	ff 24       	eor	r15, r15
    127e:	f3 94       	inc	r15
    1280:	f0 0e       	add	r15, r16
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <dtoa_prf+0x24>
    1284:	2c e3       	ldi	r18, 0x3C	; 60
    1286:	f2 2e       	mov	r15, r18
    1288:	0f 2d       	mov	r16, r15
    128a:	27 e0       	ldi	r18, 0x07	; 7
    128c:	ae 01       	movw	r20, r28
    128e:	4f 5f       	subi	r20, 0xFF	; 255
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
    1292:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__ftoa_engine>
    1296:	bc 01       	movw	r22, r24
    1298:	49 81       	ldd	r20, Y+1	; 0x01
    129a:	84 2f       	mov	r24, r20
    129c:	89 70       	andi	r24, 0x09	; 9
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	31 f0       	breq	.+12     	; 0x12ae <dtoa_prf+0x4a>
    12a2:	e1 fc       	sbrc	r14, 1
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <dtoa_prf+0x4e>
    12a6:	e0 fe       	sbrs	r14, 0
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <dtoa_prf+0x52>
    12aa:	90 e2       	ldi	r25, 0x20	; 32
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <dtoa_prf+0x54>
    12ae:	9d e2       	ldi	r25, 0x2D	; 45
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <dtoa_prf+0x54>
    12b2:	9b e2       	ldi	r25, 0x2B	; 43
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <dtoa_prf+0x54>
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	5e 2d       	mov	r21, r14
    12ba:	50 71       	andi	r21, 0x10	; 16
    12bc:	43 ff       	sbrs	r20, 3
    12be:	3c c0       	rjmp	.+120    	; 0x1338 <dtoa_prf+0xd4>
    12c0:	91 11       	cpse	r25, r1
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <dtoa_prf+0x64>
    12c4:	83 e0       	ldi	r24, 0x03	; 3
    12c6:	01 c0       	rjmp	.+2      	; 0x12ca <dtoa_prf+0x66>
    12c8:	84 e0       	ldi	r24, 0x04	; 4
    12ca:	81 17       	cp	r24, r17
    12cc:	18 f4       	brcc	.+6      	; 0x12d4 <dtoa_prf+0x70>
    12ce:	21 2f       	mov	r18, r17
    12d0:	28 1b       	sub	r18, r24
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <dtoa_prf+0x72>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	51 11       	cpse	r21, r1
    12d8:	0b c0       	rjmp	.+22     	; 0x12f0 <dtoa_prf+0x8c>
    12da:	f6 01       	movw	r30, r12
    12dc:	82 2f       	mov	r24, r18
    12de:	30 e2       	ldi	r19, 0x20	; 32
    12e0:	88 23       	and	r24, r24
    12e2:	19 f0       	breq	.+6      	; 0x12ea <dtoa_prf+0x86>
    12e4:	31 93       	st	Z+, r19
    12e6:	81 50       	subi	r24, 0x01	; 1
    12e8:	fb cf       	rjmp	.-10     	; 0x12e0 <dtoa_prf+0x7c>
    12ea:	c2 0e       	add	r12, r18
    12ec:	d1 1c       	adc	r13, r1
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	99 23       	and	r25, r25
    12f2:	29 f0       	breq	.+10     	; 0x12fe <dtoa_prf+0x9a>
    12f4:	d6 01       	movw	r26, r12
    12f6:	9c 93       	st	X, r25
    12f8:	f6 01       	movw	r30, r12
    12fa:	31 96       	adiw	r30, 0x01	; 1
    12fc:	6f 01       	movw	r12, r30
    12fe:	c6 01       	movw	r24, r12
    1300:	03 96       	adiw	r24, 0x03	; 3
    1302:	e2 fe       	sbrs	r14, 2
    1304:	0a c0       	rjmp	.+20     	; 0x131a <dtoa_prf+0xb6>
    1306:	3e e4       	ldi	r19, 0x4E	; 78
    1308:	d6 01       	movw	r26, r12
    130a:	3c 93       	st	X, r19
    130c:	41 e4       	ldi	r20, 0x41	; 65
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	4c 93       	st	X, r20
    1312:	11 97       	sbiw	r26, 0x01	; 1
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	3c 93       	st	X, r19
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <dtoa_prf+0xc2>
    131a:	3e e6       	ldi	r19, 0x6E	; 110
    131c:	f6 01       	movw	r30, r12
    131e:	30 83       	st	Z, r19
    1320:	41 e6       	ldi	r20, 0x61	; 97
    1322:	41 83       	std	Z+1, r20	; 0x01
    1324:	32 83       	std	Z+2, r19	; 0x02
    1326:	fc 01       	movw	r30, r24
    1328:	32 2f       	mov	r19, r18
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	33 23       	and	r19, r19
    132e:	09 f4       	brne	.+2      	; 0x1332 <dtoa_prf+0xce>
    1330:	42 c0       	rjmp	.+132    	; 0x13b6 <dtoa_prf+0x152>
    1332:	41 93       	st	Z+, r20
    1334:	31 50       	subi	r19, 0x01	; 1
    1336:	fa cf       	rjmp	.-12     	; 0x132c <dtoa_prf+0xc8>
    1338:	42 ff       	sbrs	r20, 2
    133a:	44 c0       	rjmp	.+136    	; 0x13c4 <dtoa_prf+0x160>
    133c:	91 11       	cpse	r25, r1
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <dtoa_prf+0xe0>
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <dtoa_prf+0xe2>
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	81 17       	cp	r24, r17
    1348:	18 f4       	brcc	.+6      	; 0x1350 <dtoa_prf+0xec>
    134a:	21 2f       	mov	r18, r17
    134c:	28 1b       	sub	r18, r24
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <dtoa_prf+0xee>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	51 11       	cpse	r21, r1
    1354:	0b c0       	rjmp	.+22     	; 0x136c <dtoa_prf+0x108>
    1356:	f6 01       	movw	r30, r12
    1358:	82 2f       	mov	r24, r18
    135a:	30 e2       	ldi	r19, 0x20	; 32
    135c:	88 23       	and	r24, r24
    135e:	19 f0       	breq	.+6      	; 0x1366 <dtoa_prf+0x102>
    1360:	31 93       	st	Z+, r19
    1362:	81 50       	subi	r24, 0x01	; 1
    1364:	fb cf       	rjmp	.-10     	; 0x135c <dtoa_prf+0xf8>
    1366:	c2 0e       	add	r12, r18
    1368:	d1 1c       	adc	r13, r1
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	99 23       	and	r25, r25
    136e:	29 f0       	breq	.+10     	; 0x137a <dtoa_prf+0x116>
    1370:	d6 01       	movw	r26, r12
    1372:	9c 93       	st	X, r25
    1374:	f6 01       	movw	r30, r12
    1376:	31 96       	adiw	r30, 0x01	; 1
    1378:	6f 01       	movw	r12, r30
    137a:	c6 01       	movw	r24, r12
    137c:	03 96       	adiw	r24, 0x03	; 3
    137e:	e2 fe       	sbrs	r14, 2
    1380:	0b c0       	rjmp	.+22     	; 0x1398 <dtoa_prf+0x134>
    1382:	39 e4       	ldi	r19, 0x49	; 73
    1384:	d6 01       	movw	r26, r12
    1386:	3c 93       	st	X, r19
    1388:	3e e4       	ldi	r19, 0x4E	; 78
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	3c 93       	st	X, r19
    138e:	11 97       	sbiw	r26, 0x01	; 1
    1390:	36 e4       	ldi	r19, 0x46	; 70
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	3c 93       	st	X, r19
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <dtoa_prf+0x142>
    1398:	39 e6       	ldi	r19, 0x69	; 105
    139a:	f6 01       	movw	r30, r12
    139c:	30 83       	st	Z, r19
    139e:	3e e6       	ldi	r19, 0x6E	; 110
    13a0:	31 83       	std	Z+1, r19	; 0x01
    13a2:	36 e6       	ldi	r19, 0x66	; 102
    13a4:	32 83       	std	Z+2, r19	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	32 2f       	mov	r19, r18
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	33 23       	and	r19, r19
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <dtoa_prf+0x152>
    13b0:	41 93       	st	Z+, r20
    13b2:	31 50       	subi	r19, 0x01	; 1
    13b4:	fb cf       	rjmp	.-10     	; 0x13ac <dtoa_prf+0x148>
    13b6:	fc 01       	movw	r30, r24
    13b8:	e2 0f       	add	r30, r18
    13ba:	f1 1d       	adc	r31, r1
    13bc:	10 82       	st	Z, r1
    13be:	8e ef       	ldi	r24, 0xFE	; 254
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	a6 c0       	rjmp	.+332    	; 0x1510 <dtoa_prf+0x2ac>
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	91 11       	cpse	r25, r1
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <dtoa_prf+0x16c>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	16 16       	cp	r1, r22
    13d2:	17 06       	cpc	r1, r23
    13d4:	1c f4       	brge	.+6      	; 0x13dc <dtoa_prf+0x178>
    13d6:	fb 01       	movw	r30, r22
    13d8:	31 96       	adiw	r30, 0x01	; 1
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <dtoa_prf+0x17c>
    13dc:	e1 e0       	ldi	r30, 0x01	; 1
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	2e 0f       	add	r18, r30
    13e2:	3f 1f       	adc	r19, r31
    13e4:	bb 20       	and	r11, r11
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <dtoa_prf+0x18c>
    13e8:	eb 2d       	mov	r30, r11
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	31 96       	adiw	r30, 0x01	; 1
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <dtoa_prf+0x190>
    13f0:	e0 e0       	ldi	r30, 0x00	; 0
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	2e 0f       	add	r18, r30
    13f6:	3f 1f       	adc	r19, r31
    13f8:	e1 2f       	mov	r30, r17
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	2e 17       	cp	r18, r30
    13fe:	3f 07       	cpc	r19, r31
    1400:	1c f4       	brge	.+6      	; 0x1408 <dtoa_prf+0x1a4>
    1402:	12 1b       	sub	r17, r18
    1404:	21 2f       	mov	r18, r17
    1406:	01 c0       	rjmp	.+2      	; 0x140a <dtoa_prf+0x1a6>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	8e 2d       	mov	r24, r14
    140c:	88 71       	andi	r24, 0x18	; 24
    140e:	59 f4       	brne	.+22     	; 0x1426 <dtoa_prf+0x1c2>
    1410:	f6 01       	movw	r30, r12
    1412:	82 2f       	mov	r24, r18
    1414:	30 e2       	ldi	r19, 0x20	; 32
    1416:	88 23       	and	r24, r24
    1418:	19 f0       	breq	.+6      	; 0x1420 <dtoa_prf+0x1bc>
    141a:	31 93       	st	Z+, r19
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	fb cf       	rjmp	.-10     	; 0x1416 <dtoa_prf+0x1b2>
    1420:	c2 0e       	add	r12, r18
    1422:	d1 1c       	adc	r13, r1
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	99 23       	and	r25, r25
    1428:	29 f0       	breq	.+10     	; 0x1434 <dtoa_prf+0x1d0>
    142a:	d6 01       	movw	r26, r12
    142c:	9c 93       	st	X, r25
    142e:	f6 01       	movw	r30, r12
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	6f 01       	movw	r12, r30
    1434:	51 11       	cpse	r21, r1
    1436:	0b c0       	rjmp	.+22     	; 0x144e <dtoa_prf+0x1ea>
    1438:	f6 01       	movw	r30, r12
    143a:	82 2f       	mov	r24, r18
    143c:	90 e3       	ldi	r25, 0x30	; 48
    143e:	88 23       	and	r24, r24
    1440:	19 f0       	breq	.+6      	; 0x1448 <dtoa_prf+0x1e4>
    1442:	91 93       	st	Z+, r25
    1444:	81 50       	subi	r24, 0x01	; 1
    1446:	fb cf       	rjmp	.-10     	; 0x143e <dtoa_prf+0x1da>
    1448:	c2 0e       	add	r12, r18
    144a:	d1 1c       	adc	r13, r1
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	0f 2d       	mov	r16, r15
    1450:	06 0f       	add	r16, r22
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	34 2f       	mov	r19, r20
    1456:	30 71       	andi	r19, 0x10	; 16
    1458:	44 ff       	sbrs	r20, 4
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <dtoa_prf+0x1fe>
    145c:	91 33       	cpi	r25, 0x31	; 49
    145e:	09 f4       	brne	.+2      	; 0x1462 <dtoa_prf+0x1fe>
    1460:	01 50       	subi	r16, 0x01	; 1
    1462:	10 16       	cp	r1, r16
    1464:	24 f4       	brge	.+8      	; 0x146e <dtoa_prf+0x20a>
    1466:	09 30       	cpi	r16, 0x09	; 9
    1468:	18 f0       	brcs	.+6      	; 0x1470 <dtoa_prf+0x20c>
    146a:	08 e0       	ldi	r16, 0x08	; 8
    146c:	01 c0       	rjmp	.+2      	; 0x1470 <dtoa_prf+0x20c>
    146e:	01 e0       	ldi	r16, 0x01	; 1
    1470:	ab 01       	movw	r20, r22
    1472:	77 ff       	sbrs	r23, 7
    1474:	02 c0       	rjmp	.+4      	; 0x147a <dtoa_prf+0x216>
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	fb 01       	movw	r30, r22
    147c:	e4 1b       	sub	r30, r20
    147e:	f5 0b       	sbc	r31, r21
    1480:	a1 e0       	ldi	r26, 0x01	; 1
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ac 0f       	add	r26, r28
    1486:	bd 1f       	adc	r27, r29
    1488:	ea 0f       	add	r30, r26
    148a:	fb 1f       	adc	r31, r27
    148c:	8e e2       	ldi	r24, 0x2E	; 46
    148e:	a8 2e       	mov	r10, r24
    1490:	4b 01       	movw	r8, r22
    1492:	80 1a       	sub	r8, r16
    1494:	91 08       	sbc	r9, r1
    1496:	0b 2d       	mov	r16, r11
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	11 95       	neg	r17
    149c:	01 95       	neg	r16
    149e:	11 09       	sbc	r17, r1
    14a0:	4f 3f       	cpi	r20, 0xFF	; 255
    14a2:	bf ef       	ldi	r27, 0xFF	; 255
    14a4:	5b 07       	cpc	r21, r27
    14a6:	21 f4       	brne	.+8      	; 0x14b0 <dtoa_prf+0x24c>
    14a8:	d6 01       	movw	r26, r12
    14aa:	ac 92       	st	X, r10
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	6d 01       	movw	r12, r26
    14b0:	64 17       	cp	r22, r20
    14b2:	75 07       	cpc	r23, r21
    14b4:	2c f0       	brlt	.+10     	; 0x14c0 <dtoa_prf+0x25c>
    14b6:	84 16       	cp	r8, r20
    14b8:	95 06       	cpc	r9, r21
    14ba:	14 f4       	brge	.+4      	; 0x14c0 <dtoa_prf+0x25c>
    14bc:	81 81       	ldd	r24, Z+1	; 0x01
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <dtoa_prf+0x25e>
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	41 50       	subi	r20, 0x01	; 1
    14c4:	51 09       	sbc	r21, r1
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	d6 01       	movw	r26, r12
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	7d 01       	movw	r14, r26
    14ce:	40 17       	cp	r20, r16
    14d0:	51 07       	cpc	r21, r17
    14d2:	24 f0       	brlt	.+8      	; 0x14dc <dtoa_prf+0x278>
    14d4:	d6 01       	movw	r26, r12
    14d6:	8c 93       	st	X, r24
    14d8:	67 01       	movw	r12, r14
    14da:	e2 cf       	rjmp	.-60     	; 0x14a0 <dtoa_prf+0x23c>
    14dc:	64 17       	cp	r22, r20
    14de:	75 07       	cpc	r23, r21
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <dtoa_prf+0x28c>
    14e2:	96 33       	cpi	r25, 0x36	; 54
    14e4:	20 f4       	brcc	.+8      	; 0x14ee <dtoa_prf+0x28a>
    14e6:	95 33       	cpi	r25, 0x35	; 53
    14e8:	19 f4       	brne	.+6      	; 0x14f0 <dtoa_prf+0x28c>
    14ea:	31 11       	cpse	r19, r1
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <dtoa_prf+0x28c>
    14ee:	81 e3       	ldi	r24, 0x31	; 49
    14f0:	f6 01       	movw	r30, r12
    14f2:	80 83       	st	Z, r24
    14f4:	f7 01       	movw	r30, r14
    14f6:	82 2f       	mov	r24, r18
    14f8:	90 e2       	ldi	r25, 0x20	; 32
    14fa:	88 23       	and	r24, r24
    14fc:	19 f0       	breq	.+6      	; 0x1504 <dtoa_prf+0x2a0>
    14fe:	91 93       	st	Z+, r25
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	fb cf       	rjmp	.-10     	; 0x14fa <dtoa_prf+0x296>
    1504:	f7 01       	movw	r30, r14
    1506:	e2 0f       	add	r30, r18
    1508:	f1 1d       	adc	r31, r1
    150a:	10 82       	st	Z, r1
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	29 96       	adiw	r28, 0x09	; 9
    1512:	ec e0       	ldi	r30, 0x0C	; 12
    1514:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__epilogue_restores__+0xc>

00001518 <__ftoa_engine>:
    1518:	28 30       	cpi	r18, 0x08	; 8
    151a:	08 f0       	brcs	.+2      	; 0x151e <__ftoa_engine+0x6>
    151c:	27 e0       	ldi	r18, 0x07	; 7
    151e:	33 27       	eor	r19, r19
    1520:	da 01       	movw	r26, r20
    1522:	99 0f       	add	r25, r25
    1524:	31 1d       	adc	r19, r1
    1526:	87 fd       	sbrc	r24, 7
    1528:	91 60       	ori	r25, 0x01	; 1
    152a:	00 96       	adiw	r24, 0x00	; 0
    152c:	61 05       	cpc	r22, r1
    152e:	71 05       	cpc	r23, r1
    1530:	39 f4       	brne	.+14     	; 0x1540 <__ftoa_engine+0x28>
    1532:	32 60       	ori	r19, 0x02	; 2
    1534:	2e 5f       	subi	r18, 0xFE	; 254
    1536:	3d 93       	st	X+, r19
    1538:	30 e3       	ldi	r19, 0x30	; 48
    153a:	2a 95       	dec	r18
    153c:	e1 f7       	brne	.-8      	; 0x1536 <__ftoa_engine+0x1e>
    153e:	08 95       	ret
    1540:	9f 3f       	cpi	r25, 0xFF	; 255
    1542:	30 f0       	brcs	.+12     	; 0x1550 <__ftoa_engine+0x38>
    1544:	80 38       	cpi	r24, 0x80	; 128
    1546:	71 05       	cpc	r23, r1
    1548:	61 05       	cpc	r22, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <__ftoa_engine+0x36>
    154c:	3c 5f       	subi	r19, 0xFC	; 252
    154e:	3c 5f       	subi	r19, 0xFC	; 252
    1550:	3d 93       	st	X+, r19
    1552:	91 30       	cpi	r25, 0x01	; 1
    1554:	08 f0       	brcs	.+2      	; 0x1558 <__ftoa_engine+0x40>
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	91 1d       	adc	r25, r1
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	1f 93       	push	r17
    1560:	0f 93       	push	r16
    1562:	ff 92       	push	r15
    1564:	ef 92       	push	r14
    1566:	19 2f       	mov	r17, r25
    1568:	98 7f       	andi	r25, 0xF8	; 248
    156a:	96 95       	lsr	r25
    156c:	e9 2f       	mov	r30, r25
    156e:	96 95       	lsr	r25
    1570:	96 95       	lsr	r25
    1572:	e9 0f       	add	r30, r25
    1574:	ff 27       	eor	r31, r31
    1576:	e6 52       	subi	r30, 0x26	; 38
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	99 27       	eor	r25, r25
    157c:	33 27       	eor	r19, r19
    157e:	ee 24       	eor	r14, r14
    1580:	ff 24       	eor	r15, r15
    1582:	a7 01       	movw	r20, r14
    1584:	e7 01       	movw	r28, r14
    1586:	05 90       	lpm	r0, Z+
    1588:	08 94       	sec
    158a:	07 94       	ror	r0
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__ftoa_engine+0x80>
    158e:	36 0f       	add	r19, r22
    1590:	e7 1e       	adc	r14, r23
    1592:	f8 1e       	adc	r15, r24
    1594:	49 1f       	adc	r20, r25
    1596:	51 1d       	adc	r21, r1
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	06 94       	lsr	r0
    15a2:	a1 f7       	brne	.-24     	; 0x158c <__ftoa_engine+0x74>
    15a4:	05 90       	lpm	r0, Z+
    15a6:	07 94       	ror	r0
    15a8:	28 f4       	brcc	.+10     	; 0x15b4 <__ftoa_engine+0x9c>
    15aa:	e7 0e       	add	r14, r23
    15ac:	f8 1e       	adc	r15, r24
    15ae:	49 1f       	adc	r20, r25
    15b0:	56 1f       	adc	r21, r22
    15b2:	c1 1d       	adc	r28, r1
    15b4:	77 0f       	add	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	66 1f       	adc	r22, r22
    15bc:	06 94       	lsr	r0
    15be:	a1 f7       	brne	.-24     	; 0x15a8 <__ftoa_engine+0x90>
    15c0:	05 90       	lpm	r0, Z+
    15c2:	07 94       	ror	r0
    15c4:	28 f4       	brcc	.+10     	; 0x15d0 <__ftoa_engine+0xb8>
    15c6:	f8 0e       	add	r15, r24
    15c8:	49 1f       	adc	r20, r25
    15ca:	56 1f       	adc	r21, r22
    15cc:	c7 1f       	adc	r28, r23
    15ce:	d1 1d       	adc	r29, r1
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	66 1f       	adc	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	06 94       	lsr	r0
    15da:	a1 f7       	brne	.-24     	; 0x15c4 <__ftoa_engine+0xac>
    15dc:	05 90       	lpm	r0, Z+
    15de:	07 94       	ror	r0
    15e0:	20 f4       	brcc	.+8      	; 0x15ea <__ftoa_engine+0xd2>
    15e2:	49 0f       	add	r20, r25
    15e4:	56 1f       	adc	r21, r22
    15e6:	c7 1f       	adc	r28, r23
    15e8:	d8 1f       	adc	r29, r24
    15ea:	99 0f       	add	r25, r25
    15ec:	66 1f       	adc	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	06 94       	lsr	r0
    15f4:	a9 f7       	brne	.-22     	; 0x15e0 <__ftoa_engine+0xc8>
    15f6:	84 91       	lpm	r24, Z
    15f8:	10 95       	com	r17
    15fa:	17 70       	andi	r17, 0x07	; 7
    15fc:	41 f0       	breq	.+16     	; 0x160e <__ftoa_engine+0xf6>
    15fe:	d6 95       	lsr	r29
    1600:	c7 95       	ror	r28
    1602:	57 95       	ror	r21
    1604:	47 95       	ror	r20
    1606:	f7 94       	ror	r15
    1608:	e7 94       	ror	r14
    160a:	1a 95       	dec	r17
    160c:	c1 f7       	brne	.-16     	; 0x15fe <__ftoa_engine+0xe6>
    160e:	e0 e8       	ldi	r30, 0x80	; 128
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	68 94       	set
    1614:	15 90       	lpm	r1, Z+
    1616:	15 91       	lpm	r17, Z+
    1618:	35 91       	lpm	r19, Z+
    161a:	65 91       	lpm	r22, Z+
    161c:	95 91       	lpm	r25, Z+
    161e:	05 90       	lpm	r0, Z+
    1620:	7f e2       	ldi	r23, 0x2F	; 47
    1622:	73 95       	inc	r23
    1624:	e1 18       	sub	r14, r1
    1626:	f1 0a       	sbc	r15, r17
    1628:	43 0b       	sbc	r20, r19
    162a:	56 0b       	sbc	r21, r22
    162c:	c9 0b       	sbc	r28, r25
    162e:	d0 09       	sbc	r29, r0
    1630:	c0 f7       	brcc	.-16     	; 0x1622 <__ftoa_engine+0x10a>
    1632:	e1 0c       	add	r14, r1
    1634:	f1 1e       	adc	r15, r17
    1636:	43 1f       	adc	r20, r19
    1638:	56 1f       	adc	r21, r22
    163a:	c9 1f       	adc	r28, r25
    163c:	d0 1d       	adc	r29, r0
    163e:	7e f4       	brtc	.+30     	; 0x165e <__ftoa_engine+0x146>
    1640:	70 33       	cpi	r23, 0x30	; 48
    1642:	11 f4       	brne	.+4      	; 0x1648 <__ftoa_engine+0x130>
    1644:	8a 95       	dec	r24
    1646:	e6 cf       	rjmp	.-52     	; 0x1614 <__ftoa_engine+0xfc>
    1648:	e8 94       	clt
    164a:	01 50       	subi	r16, 0x01	; 1
    164c:	30 f0       	brcs	.+12     	; 0x165a <__ftoa_engine+0x142>
    164e:	08 0f       	add	r16, r24
    1650:	0a f4       	brpl	.+2      	; 0x1654 <__ftoa_engine+0x13c>
    1652:	00 27       	eor	r16, r16
    1654:	02 17       	cp	r16, r18
    1656:	08 f4       	brcc	.+2      	; 0x165a <__ftoa_engine+0x142>
    1658:	20 2f       	mov	r18, r16
    165a:	23 95       	inc	r18
    165c:	02 2f       	mov	r16, r18
    165e:	7a 33       	cpi	r23, 0x3A	; 58
    1660:	28 f0       	brcs	.+10     	; 0x166c <__ftoa_engine+0x154>
    1662:	79 e3       	ldi	r23, 0x39	; 57
    1664:	7d 93       	st	X+, r23
    1666:	2a 95       	dec	r18
    1668:	e9 f7       	brne	.-6      	; 0x1664 <__ftoa_engine+0x14c>
    166a:	10 c0       	rjmp	.+32     	; 0x168c <__ftoa_engine+0x174>
    166c:	7d 93       	st	X+, r23
    166e:	2a 95       	dec	r18
    1670:	89 f6       	brne	.-94     	; 0x1614 <__ftoa_engine+0xfc>
    1672:	06 94       	lsr	r0
    1674:	97 95       	ror	r25
    1676:	67 95       	ror	r22
    1678:	37 95       	ror	r19
    167a:	17 95       	ror	r17
    167c:	17 94       	ror	r1
    167e:	e1 18       	sub	r14, r1
    1680:	f1 0a       	sbc	r15, r17
    1682:	43 0b       	sbc	r20, r19
    1684:	56 0b       	sbc	r21, r22
    1686:	c9 0b       	sbc	r28, r25
    1688:	d0 09       	sbc	r29, r0
    168a:	98 f0       	brcs	.+38     	; 0x16b2 <__ftoa_engine+0x19a>
    168c:	23 95       	inc	r18
    168e:	7e 91       	ld	r23, -X
    1690:	73 95       	inc	r23
    1692:	7a 33       	cpi	r23, 0x3A	; 58
    1694:	08 f0       	brcs	.+2      	; 0x1698 <__ftoa_engine+0x180>
    1696:	70 e3       	ldi	r23, 0x30	; 48
    1698:	7c 93       	st	X, r23
    169a:	20 13       	cpse	r18, r16
    169c:	b8 f7       	brcc	.-18     	; 0x168c <__ftoa_engine+0x174>
    169e:	7e 91       	ld	r23, -X
    16a0:	70 61       	ori	r23, 0x10	; 16
    16a2:	7d 93       	st	X+, r23
    16a4:	30 f0       	brcs	.+12     	; 0x16b2 <__ftoa_engine+0x19a>
    16a6:	83 95       	inc	r24
    16a8:	71 e3       	ldi	r23, 0x31	; 49
    16aa:	7d 93       	st	X+, r23
    16ac:	70 e3       	ldi	r23, 0x30	; 48
    16ae:	2a 95       	dec	r18
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <__ftoa_engine+0x192>
    16b2:	11 24       	eor	r1, r1
    16b4:	ef 90       	pop	r14
    16b6:	ff 90       	pop	r15
    16b8:	0f 91       	pop	r16
    16ba:	1f 91       	pop	r17
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	99 27       	eor	r25, r25
    16c2:	87 fd       	sbrc	r24, 7
    16c4:	90 95       	com	r25
    16c6:	08 95       	ret

000016c8 <__prologue_saves__>:
    16c8:	2f 92       	push	r2
    16ca:	3f 92       	push	r3
    16cc:	4f 92       	push	r4
    16ce:	5f 92       	push	r5
    16d0:	6f 92       	push	r6
    16d2:	7f 92       	push	r7
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	ca 1b       	sub	r28, r26
    16f2:	db 0b       	sbc	r29, r27
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	09 94       	ijmp

00001700 <__epilogue_restores__>:
    1700:	2a 88       	ldd	r2, Y+18	; 0x12
    1702:	39 88       	ldd	r3, Y+17	; 0x11
    1704:	48 88       	ldd	r4, Y+16	; 0x10
    1706:	5f 84       	ldd	r5, Y+15	; 0x0f
    1708:	6e 84       	ldd	r6, Y+14	; 0x0e
    170a:	7d 84       	ldd	r7, Y+13	; 0x0d
    170c:	8c 84       	ldd	r8, Y+12	; 0x0c
    170e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1710:	aa 84       	ldd	r10, Y+10	; 0x0a
    1712:	b9 84       	ldd	r11, Y+9	; 0x09
    1714:	c8 84       	ldd	r12, Y+8	; 0x08
    1716:	df 80       	ldd	r13, Y+7	; 0x07
    1718:	ee 80       	ldd	r14, Y+6	; 0x06
    171a:	fd 80       	ldd	r15, Y+5	; 0x05
    171c:	0c 81       	ldd	r16, Y+4	; 0x04
    171e:	1b 81       	ldd	r17, Y+3	; 0x03
    1720:	aa 81       	ldd	r26, Y+2	; 0x02
    1722:	b9 81       	ldd	r27, Y+1	; 0x01
    1724:	ce 0f       	add	r28, r30
    1726:	d1 1d       	adc	r29, r1
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	ed 01       	movw	r28, r26
    1734:	08 95       	ret

00001736 <_exit>:
    1736:	f8 94       	cli

00001738 <__stop_program>:
    1738:	ff cf       	rjmp	.-2      	; 0x1738 <__stop_program>
