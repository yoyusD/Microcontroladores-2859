
sdk_at328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  000008e2  00000976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800190  00800190  00000a06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027e9  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc5  00000000  00000000  00003481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a2  00000000  00000000  00004246  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e0  00000000  00000000  000059e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ed  00000000  00000000  00005ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001761  00000000  00000000  000066b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00007e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	b1 02       	muls	r27, r17
  6a:	b4 02       	muls	r27, r20
  6c:	2f 02       	muls	r18, r31
  6e:	3c 02       	muls	r19, r28
  70:	49 02       	muls	r20, r25
  72:	56 02       	muls	r21, r22
  74:	63 02       	muls	r22, r19
  76:	70 02       	muls	r23, r16
  78:	7d 02       	muls	r23, r29
  7a:	8a 02       	muls	r24, r26
  7c:	97 02       	muls	r25, r23
  7e:	a4 02       	muls	r26, r20

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e2 ee       	ldi	r30, 0xE2	; 226
  94:	f8 e0       	ldi	r31, 0x08	; 8
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a0 39       	cpi	r26, 0x90	; 144
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e9       	ldi	r26, 0x90	; 144
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a1 3a       	cpi	r26, 0xA1	; 161
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  b6:	0c 94 6f 04 	jmp	0x8de	; 0x8de <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <init_i2c>:
  be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  c2:	84 e1       	ldi	r24, 0x14	; 20
  c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	08 95       	ret

000000d0 <start>:
  d0:	84 ea       	ldi	r24, 0xA4	; 164
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <start+0x6>
  de:	08 95       	ret

000000e0 <stop>:
  e0:	84 e9       	ldi	r24, 0x94	; 148
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e9       	ldi	r24, 0x9F	; 159
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <stop+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <stop+0x10>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <write_i2c>:
  f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f8:	84 ec       	ldi	r24, 0xC4	; 196
  fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 102:	88 23       	and	r24, r24
 104:	e4 f7       	brge	.-8      	; 0xfe <write_i2c+0xa>
 106:	08 95       	ret

00000108 <lcd_i2c_reset>:

/*	4 bits mode (pag.46 44780 datasheet) */
void lcd_i2c_reset(void)
{
	//unsigned char data;
	start();	//START--> I2C
 108:	0e 94 68 00 	call	0xd0	; 0xd0 <start>
	write_i2c(PCF8574_ADDR);
 10c:	80 e7       	ldi	r24, 0x70	; 112
 10e:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
	
	write_i2c(0xFF); //wait for 15ms (at least)
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 ef       	ldi	r24, 0xF9	; 249
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <lcd_i2c_reset+0x16>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_i2c_reset+0x20>
 128:	00 00       	nop
	_delay_ms(20);
	
	write_i2c(0x30+LCD_EN); //write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=1
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
	write_i2c(0x30);		//write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=0
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9c e9       	ldi	r25, 0x9C	; 156
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_i2c_reset+0x32>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_i2c_reset+0x38>
 140:	00 00       	nop
	_delay_ms(10);			//wait for 4.1ms (ate least)
	
	write_i2c(0x30+LCD_EN); //write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=1
 142:	84 e3       	ldi	r24, 0x34	; 52
 144:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
	write_i2c(0x30);		//write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=0
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_i2c_reset+0x4a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_i2c_reset+0x50>
 158:	00 00       	nop
	_delay_ms(1);			//wait for 100 us (at least)
	
	write_i2c(0x30+LCD_EN); //write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=1
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
	write_i2c(0x30);		//write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=1 & E=0
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 166:	8f e9       	ldi	r24, 0x9F	; 159
 168:	9f e0       	ldi	r25, 0x0F	; 15
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_i2c_reset+0x62>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_i2c_reset+0x68>
 170:	00 00       	nop
	_delay_ms(1);			//wait for 100 us (at least)
	
	write_i2c(0x20+LCD_EN); //write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 & E=1
 172:	84 e2       	ldi	r24, 0x24	; 36
 174:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
	write_i2c(0x20);		//write Rs=0|RW=0|DB7=0|DB6=0|DB5=1|DB4=0 & E=0
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_i2c_reset+0x7a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_i2c_reset+0x80>
 188:	00 00       	nop
	_delay_ms(1);			//wait for 100 us (at least)
	
	stop();	//STOP--> I2C
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <stop>
 18e:	08 95       	ret

00000190 <pwm_led>:
 * Created: 07/05/2024 10:21:52 a. m.
 *  Author: guado
 */ 
#include <avr/io.h>

void pwm_led(int led_color,int duty_cycle){ //duty_cycle RANGE = 0 - 255
 190:	9c 01       	movw	r18, r24
	TCCR0B |= (1<<CS00)|(1<<CS01); //prescaler Fosc/64
 192:	95 b5       	in	r25, 0x25	; 37
 194:	93 60       	ori	r25, 0x03	; 3
 196:	95 bd       	out	0x25, r25	; 37
	TCCR2B |= (1<<CS20)|(1<<CS21); //prescaler Fosc/64
 198:	e1 eb       	ldi	r30, 0xB1	; 177
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	90 81       	ld	r25, Z
 19e:	93 60       	ori	r25, 0x03	; 3
 1a0:	90 83       	st	Z, r25
	
	if(led_color == 1) //RED
 1a2:	21 30       	cpi	r18, 0x01	; 1
 1a4:	31 05       	cpc	r19, r1
 1a6:	29 f4       	brne	.+10     	; 0x1b2 <pwm_led+0x22>
	{
		TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0A1);//fast pwm, non inverted
 1a8:	84 b5       	in	r24, 0x24	; 36
 1aa:	83 68       	ori	r24, 0x83	; 131
 1ac:	84 bd       	out	0x24, r24	; 36
		OCR0A=duty_cycle; //PIND6
 1ae:	67 bd       	out	0x27, r22	; 39
 1b0:	08 95       	ret
	}
	
	else if(led_color == 2){ //GREEN
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <pwm_led+0x32>
		TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0B1);//fast pwm, non inverted
 1b8:	84 b5       	in	r24, 0x24	; 36
 1ba:	83 62       	ori	r24, 0x23	; 35
 1bc:	84 bd       	out	0x24, r24	; 36
		OCR0B=duty_cycle; //PIND5
 1be:	68 bd       	out	0x28, r22	; 40
 1c0:	08 95       	ret
	}
	
	else if (led_color ==3) //BLUE
 1c2:	23 30       	cpi	r18, 0x03	; 3
 1c4:	31 05       	cpc	r19, r1
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <pwm_led+0x46>
	{
		TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<COM2B1);//fast pwm, non inverted
 1c8:	e0 eb       	ldi	r30, 0xB0	; 176
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	83 62       	ori	r24, 0x23	; 35
 1d0:	80 83       	st	Z, r24
		OCR2B=duty_cycle; //PIND3
 1d2:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 1d6:	08 95       	ret

000001d8 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
    init_ports();
 1d8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <init_ports>
	
	init_i2c();
 1dc:	0e 94 5f 00 	call	0xbe	; 0xbe <init_i2c>
	ssd_i2c_init();
 1e0:	0e 94 23 01 	call	0x246	; 0x246 <ssd_i2c_init>
	clear_screen();
 1e4:	0e 94 b6 02 	call	0x56c	; 0x56c <clear_screen>
	init_usart(207);
 1e8:	8f ec       	ldi	r24, 0xCF	; 207
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <init_usart>
	write_led();
 1f0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <write_led>
	sei(); /*enable general interrupts*/
 1f4:	78 94       	sei
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0x1e>

000001f8 <init_ports>:
 */ 
#include <avr/io.h>

void init_ports(void)
{
	DDRB = 0xFF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	84 b9       	out	0x04, r24	; 4
	// PD2 input for INT0, PD3 input for INT1
	DDRD = (1<<PIND3)|(1<<PIND5)|(1<<PIND6); //pwm outputs 
 1fc:	88 e6       	ldi	r24, 0x68	; 104
 1fe:	8a b9       	out	0x0a, r24	; 10
	// PC0 input for ADC0
	DDRC &= (0 << PINC0);
 200:	87 b1       	in	r24, 0x07	; 7
 202:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << PINC0); //enable Rp
 204:	88 b1       	in	r24, 0x08	; 8
 206:	81 60       	ori	r24, 0x01	; 1
 208:	88 b9       	out	0x08, r24	; 8
 20a:	08 95       	ret

0000020c <ssd_i2c_cmd>:
		
		default:
		break;
		
	}
}
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
 210:	0e 94 68 00 	call	0xd0	; 0xd0 <start>
 214:	88 e7       	ldi	r24, 0x78	; 120
 216:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 226:	0e 94 70 00 	call	0xe0	; 0xe0 <stop>
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9f e1       	ldi	r25, 0x1F	; 31
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <ssd_i2c_cmd+0x22>
 232:	00 c0       	rjmp	.+0      	; 0x234 <ssd_i2c_cmd+0x28>
 234:	00 00       	nop
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9f e1       	ldi	r25, 0x1F	; 31
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <ssd_i2c_cmd+0x2e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <ssd_i2c_cmd+0x34>
 240:	00 00       	nop
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <ssd_i2c_init>:
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <init_i2c>
 24a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_i2c_reset>
 24e:	8e ea       	ldi	r24, 0xAE	; 174
 250:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 254:	84 ed       	ldi	r24, 0xD4	; 212
 256:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 260:	88 ea       	ldi	r24, 0xA8	; 168
 262:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 266:	8f e3       	ldi	r24, 0x3F	; 63
 268:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 26c:	83 ed       	ldi	r24, 0xD3	; 211
 26e:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 27e:	8d e8       	ldi	r24, 0x8D	; 141
 280:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 284:	84 e1       	ldi	r24, 0x14	; 20
 286:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 28a:	81 ea       	ldi	r24, 0xA1	; 161
 28c:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 290:	88 ec       	ldi	r24, 0xC8	; 200
 292:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 296:	8a ed       	ldi	r24, 0xDA	; 218
 298:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 29c:	82 e1       	ldi	r24, 0x12	; 18
 29e:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2a2:	81 e8       	ldi	r24, 0x81	; 129
 2a4:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2ae:	89 ed       	ldi	r24, 0xD9	; 217
 2b0:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2b4:	81 ef       	ldi	r24, 0xF1	; 241
 2b6:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2ba:	8b ed       	ldi	r24, 0xDB	; 219
 2bc:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2c6:	84 ea       	ldi	r24, 0xA4	; 164
 2c8:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2cc:	86 ea       	ldi	r24, 0xA6	; 166
 2ce:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2d2:	8f ea       	ldi	r24, 0xAF	; 175
 2d4:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 2d8:	08 95       	ret

000002da <ssd_write>:
 2da:	cf 93       	push	r28
 2dc:	c8 2f       	mov	r28, r24
 2de:	0e 94 68 00 	call	0xd0	; 0xd0 <start>
 2e2:	88 e7       	ldi	r24, 0x78	; 120
 2e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 2f4:	0e 94 70 00 	call	0xe0	; 0xe0 <stop>
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	9f e1       	ldi	r25, 0x1F	; 31
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <ssd_write+0x22>
 300:	00 c0       	rjmp	.+0      	; 0x302 <ssd_write+0x28>
 302:	00 00       	nop
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	9f e1       	ldi	r25, 0x1F	; 31
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <ssd_write+0x2e>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <ssd_write+0x34>
 30e:	00 00       	nop
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <set_cursor>:
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	08 f0       	brcs	.+2      	; 0x320 <set_cursor+0xc>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	6f 37       	cpi	r22, 0x7F	; 127
 324:	08 f0       	brcs	.+2      	; 0x328 <set_cursor+0x14>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	92 23       	and	r25, r18
 32a:	e1 f0       	breq	.+56     	; 0x364 <set_cursor+0x50>
 32c:	d6 2f       	mov	r29, r22
 32e:	c8 2f       	mov	r28, r24
 330:	81 e2       	ldi	r24, 0x21	; 33
 332:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 336:	8d 2f       	mov	r24, r29
 338:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 33c:	8f e7       	ldi	r24, 0x7F	; 127
 33e:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 342:	82 e2       	ldi	r24, 0x22	; 34
 344:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	0e 94 06 01 	call	0x20c	; 0x20c <ssd_i2c_cmd>
 354:	0e 94 68 00 	call	0xd0	; 0xd0 <start>
 358:	88 e7       	ldi	r24, 0x78	; 120
 35a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 35e:	80 e4       	ldi	r24, 0x40	; 64
 360:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_i2c>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <ssd_num_write>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	41 15       	cp	r20, r1
 370:	51 05       	cpc	r21, r1
 372:	f9 f4       	brne	.+62     	; 0x3b2 <ssd_num_write+0x48>
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	41 f4       	brne	.+16     	; 0x388 <ssd_num_write+0x1e>
 378:	69 e1       	ldi	r22, 0x19	; 25
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 386:	56 c0       	rjmp	.+172    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 388:	62 30       	cpi	r22, 0x02	; 2
 38a:	41 f4       	brne	.+16     	; 0x39c <ssd_num_write+0x32>
 38c:	66 e2       	ldi	r22, 0x26	; 38
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 39a:	4c c0       	rjmp	.+152    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 39c:	63 30       	cpi	r22, 0x03	; 3
 39e:	09 f0       	breq	.+2      	; 0x3a2 <ssd_num_write+0x38>
 3a0:	49 c0       	rjmp	.+146    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3a2:	60 e2       	ldi	r22, 0x20	; 32
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 3b0:	41 c0       	rjmp	.+130    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3b2:	41 30       	cpi	r20, 0x01	; 1
 3b4:	51 05       	cpc	r21, r1
 3b6:	f1 f4       	brne	.+60     	; 0x3f4 <ssd_num_write+0x8a>
 3b8:	61 30       	cpi	r22, 0x01	; 1
 3ba:	41 f4       	brne	.+16     	; 0x3cc <ssd_num_write+0x62>
 3bc:	6f e1       	ldi	r22, 0x1F	; 31
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 3ca:	34 c0       	rjmp	.+104    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3cc:	62 30       	cpi	r22, 0x02	; 2
 3ce:	41 f4       	brne	.+16     	; 0x3e0 <ssd_num_write+0x76>
 3d0:	6c e2       	ldi	r22, 0x2C	; 44
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 3de:	2a c0       	rjmp	.+84     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e0:	63 30       	cpi	r22, 0x03	; 3
 3e2:	41 f5       	brne	.+80     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e4:	66 e2       	ldi	r22, 0x26	; 38
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 3f2:	20 c0       	rjmp	.+64     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3f4:	42 30       	cpi	r20, 0x02	; 2
 3f6:	51 05       	cpc	r21, r1
 3f8:	e9 f4       	brne	.+58     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3fa:	61 30       	cpi	r22, 0x01	; 1
 3fc:	41 f4       	brne	.+16     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fe:	65 e2       	ldi	r22, 0x25	; 37
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 40c:	13 c0       	rjmp	.+38     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40e:	62 30       	cpi	r22, 0x02	; 2
 410:	41 f4       	brne	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 412:	62 e3       	ldi	r22, 0x32	; 50
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 420:	09 c0       	rjmp	.+18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 422:	63 30       	cpi	r22, 0x03	; 3
 424:	39 f4       	brne	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 426:	6c e2       	ldi	r22, 0x2C	; 44
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 434:	8c 2f       	mov	r24, r28
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	be 97       	sbiw	r30, 0x2e	; 46
 43c:	ec 30       	cpi	r30, 0x0C	; 12
 43e:	f1 05       	cpc	r31, r1
 440:	08 f0       	brcs	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	92 c0       	rjmp	.+292    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 444:	ec 5c       	subi	r30, 0xCC	; 204
 446:	ff 4f       	sbci	r31, 0xFF	; 255
 448:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__tablejump2__>
 44c:	ec 2f       	mov	r30, r28
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	e6 57       	subi	r30, 0x76	; 118
 452:	fe 4f       	sbci	r31, 0xFE	; 254
 454:	80 81       	ld	r24, Z
 456:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 45a:	cf 5f       	subi	r28, 0xFF	; 255
 45c:	01 c0       	rjmp	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	c6 30       	cpi	r28, 0x06	; 6
 462:	a0 f3       	brcs	.-24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 464:	81 c0       	rjmp	.+258    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 466:	ec 2f       	mov	r30, r28
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ec 57       	subi	r30, 0x7C	; 124
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	80 81       	ld	r24, Z
 470:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 474:	cf 5f       	subi	r28, 0xFF	; 255
 476:	01 c0       	rjmp	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 478:	c0 e0       	ldi	r28, 0x00	; 0
 47a:	c6 30       	cpi	r28, 0x06	; 6
 47c:	a0 f3       	brcs	.-24     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 47e:	74 c0       	rjmp	.+232    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 480:	ec 2f       	mov	r30, r28
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	e2 58       	subi	r30, 0x82	; 130
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	80 81       	ld	r24, Z
 48a:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 48e:	cf 5f       	subi	r28, 0xFF	; 255
 490:	01 c0       	rjmp	.+2      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 492:	c0 e0       	ldi	r28, 0x00	; 0
 494:	c6 30       	cpi	r28, 0x06	; 6
 496:	a0 f3       	brcs	.-24     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 498:	67 c0       	rjmp	.+206    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 49a:	ec 2f       	mov	r30, r28
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	e8 58       	subi	r30, 0x88	; 136
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	80 81       	ld	r24, Z
 4a4:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 4a8:	cf 5f       	subi	r28, 0xFF	; 255
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ac:	c0 e0       	ldi	r28, 0x00	; 0
 4ae:	c6 30       	cpi	r28, 0x06	; 6
 4b0:	a0 f3       	brcs	.-24     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4b2:	5a c0       	rjmp	.+180    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 4b4:	ec 2f       	mov	r30, r28
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ee 58       	subi	r30, 0x8E	; 142
 4ba:	fe 4f       	sbci	r31, 0xFE	; 254
 4bc:	80 81       	ld	r24, Z
 4be:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 4c2:	cf 5f       	subi	r28, 0xFF	; 255
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	c6 30       	cpi	r28, 0x06	; 6
 4ca:	a0 f3       	brcs	.-24     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4cc:	4d c0       	rjmp	.+154    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 4ce:	ec 2f       	mov	r30, r28
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	e4 59       	subi	r30, 0x94	; 148
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	80 81       	ld	r24, Z
 4d8:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 4dc:	cf 5f       	subi	r28, 0xFF	; 255
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e0:	c0 e0       	ldi	r28, 0x00	; 0
 4e2:	c6 30       	cpi	r28, 0x06	; 6
 4e4:	a0 f3       	brcs	.-24     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4e6:	40 c0       	rjmp	.+128    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 4e8:	ec 2f       	mov	r30, r28
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ea 59       	subi	r30, 0x9A	; 154
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	80 81       	ld	r24, Z
 4f2:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 4f6:	cf 5f       	subi	r28, 0xFF	; 255
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	c0 e0       	ldi	r28, 0x00	; 0
 4fc:	c6 30       	cpi	r28, 0x06	; 6
 4fe:	a0 f3       	brcs	.-24     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 500:	33 c0       	rjmp	.+102    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 502:	ec 2f       	mov	r30, r28
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	e0 5a       	subi	r30, 0xA0	; 160
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	80 81       	ld	r24, Z
 50c:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 510:	cf 5f       	subi	r28, 0xFF	; 255
 512:	01 c0       	rjmp	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 514:	c0 e0       	ldi	r28, 0x00	; 0
 516:	c6 30       	cpi	r28, 0x06	; 6
 518:	a0 f3       	brcs	.-24     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 51a:	26 c0       	rjmp	.+76     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 51c:	ec 2f       	mov	r30, r28
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	e6 5a       	subi	r30, 0xA6	; 166
 522:	fe 4f       	sbci	r31, 0xFE	; 254
 524:	80 81       	ld	r24, Z
 526:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 52a:	cf 5f       	subi	r28, 0xFF	; 255
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52e:	c0 e0       	ldi	r28, 0x00	; 0
 530:	c6 30       	cpi	r28, 0x06	; 6
 532:	a0 f3       	brcs	.-24     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 534:	19 c0       	rjmp	.+50     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 536:	ec 2f       	mov	r30, r28
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ec 5a       	subi	r30, 0xAC	; 172
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	80 81       	ld	r24, Z
 540:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 544:	cf 5f       	subi	r28, 0xFF	; 255
 546:	01 c0       	rjmp	.+2      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	c6 30       	cpi	r28, 0x06	; 6
 54c:	a0 f3       	brcs	.-24     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 54e:	0c c0       	rjmp	.+24     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 550:	ec 2f       	mov	r30, r28
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	e2 5b       	subi	r30, 0xB2	; 178
 556:	fe 4f       	sbci	r31, 0xFE	; 254
 558:	80 81       	ld	r24, Z
 55a:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 55e:	cf 5f       	subi	r28, 0xFF	; 255
 560:	01 c0       	rjmp	.+2      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 562:	c0 e0       	ldi	r28, 0x00	; 0
 564:	c6 30       	cpi	r28, 0x06	; 6
 566:	a0 f3       	brcs	.-24     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <clear_screen>:
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	00 e0       	ldi	r16, 0x00	; 0
 576:	10 e0       	ldi	r17, 0x00	; 0
 578:	10 c0       	rjmp	.+32     	; 0x59a <clear_screen+0x2e>
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	80 2f       	mov	r24, r16
 57e:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
 582:	c0 e0       	ldi	r28, 0x00	; 0
 584:	d0 e0       	ldi	r29, 0x00	; 0
 586:	04 c0       	rjmp	.+8      	; 0x590 <clear_screen+0x24>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
 58e:	21 96       	adiw	r28, 0x01	; 1
 590:	c0 38       	cpi	r28, 0x80	; 128
 592:	d1 05       	cpc	r29, r1
 594:	cc f3       	brlt	.-14     	; 0x588 <clear_screen+0x1c>
 596:	0f 5f       	subi	r16, 0xFF	; 255
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	08 30       	cpi	r16, 0x08	; 8
 59c:	11 05       	cpc	r17, r1
 59e:	6c f3       	brlt	.-38     	; 0x57a <clear_screen+0xe>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <write_led>:
const unsigned char equal[] = {
	0x14, 0x14, 0x14, 0x14, 0x14,0x00   // =
};


void write_led(void){
 5aa:	cf 93       	push	r28
	unsigned char j,i;
	set_cursor(2,0);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
	for( i = 0; i < 18 ; i++){
 5b4:	c0 e0       	ldi	r28, 0x00	; 0
 5b6:	08 c0       	rjmp	.+16     	; 0x5c8 <write_led+0x1e>
		ssd_write(red[i]);
 5b8:	ec 2f       	mov	r30, r28
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	ec 5d       	subi	r30, 0xDC	; 220
 5be:	fe 4f       	sbci	r31, 0xFE	; 254
 5c0:	80 81       	ld	r24, Z
 5c2:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>


void write_led(void){
	unsigned char j,i;
	set_cursor(2,0);
	for( i = 0; i < 18 ; i++){
 5c6:	cf 5f       	subi	r28, 0xFF	; 255
 5c8:	c2 31       	cpi	r28, 0x12	; 18
 5ca:	b0 f3       	brcs	.-20     	; 0x5b8 <write_led+0xe>
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <write_led+0x36>
		ssd_write(red[i]);
	}
	for( j = 0; j < 6 ; j++){
		ssd_write(equal[j]);
 5d0:	ec 2f       	mov	r30, r28
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	e0 50       	subi	r30, 0x00	; 0
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	80 81       	ld	r24, Z
 5da:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
	unsigned char j,i;
	set_cursor(2,0);
	for( i = 0; i < 18 ; i++){
		ssd_write(red[i]);
	}
	for( j = 0; j < 6 ; j++){
 5de:	cf 5f       	subi	r28, 0xFF	; 255
 5e0:	c6 30       	cpi	r28, 0x06	; 6
 5e2:	b0 f3       	brcs	.-20     	; 0x5d0 <write_led+0x26>
		ssd_write(equal[j]);
	}

	set_cursor(3,0);
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
	for(  i = 0; i < 30 ; i++){
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <write_led+0x56>
		ssd_write(green[i]);
 5f0:	ec 2f       	mov	r30, r28
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ea 5f       	subi	r30, 0xFA	; 250
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	80 81       	ld	r24, Z
 5fa:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
	for( j = 0; j < 6 ; j++){
		ssd_write(equal[j]);
	}

	set_cursor(3,0);
	for(  i = 0; i < 30 ; i++){
 5fe:	cf 5f       	subi	r28, 0xFF	; 255
 600:	ce 31       	cpi	r28, 0x1E	; 30
 602:	b0 f3       	brcs	.-20     	; 0x5f0 <write_led+0x46>
 604:	c0 e0       	ldi	r28, 0x00	; 0
 606:	08 c0       	rjmp	.+16     	; 0x618 <write_led+0x6e>
		ssd_write(green[i]);
	}
	for( j = 0; j < 6 ; j++){
		ssd_write(equal[j]);
 608:	ec 2f       	mov	r30, r28
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	e0 50       	subi	r30, 0x00	; 0
 60e:	ff 4f       	sbci	r31, 0xFF	; 255
 610:	80 81       	ld	r24, Z
 612:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>

	set_cursor(3,0);
	for(  i = 0; i < 30 ; i++){
		ssd_write(green[i]);
	}
	for( j = 0; j < 6 ; j++){
 616:	cf 5f       	subi	r28, 0xFF	; 255
 618:	c6 30       	cpi	r28, 0x06	; 6
 61a:	b0 f3       	brcs	.-20     	; 0x608 <write_led+0x5e>
		ssd_write(equal[j]);
	}

	set_cursor(4,0);
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	0e 94 8a 01 	call	0x314	; 0x314 <set_cursor>
	for( i = 0; i < 24 ; i++){
 624:	c0 e0       	ldi	r28, 0x00	; 0
 626:	08 c0       	rjmp	.+16     	; 0x638 <write_led+0x8e>
		ssd_write(blue[i]);
 628:	ec 2f       	mov	r30, r28
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ea 5c       	subi	r30, 0xCA	; 202
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	80 81       	ld	r24, Z
 632:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>
	for( j = 0; j < 6 ; j++){
		ssd_write(equal[j]);
	}

	set_cursor(4,0);
	for( i = 0; i < 24 ; i++){
 636:	cf 5f       	subi	r28, 0xFF	; 255
 638:	c8 31       	cpi	r28, 0x18	; 24
 63a:	b0 f3       	brcs	.-20     	; 0x628 <write_led+0x7e>
 63c:	c0 e0       	ldi	r28, 0x00	; 0
 63e:	08 c0       	rjmp	.+16     	; 0x650 <write_led+0xa6>
		ssd_write(blue[i]);
	}
	for( j = 0; j < 6 ; j++){
		ssd_write(equal[j]);
 640:	ec 2f       	mov	r30, r28
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	e0 50       	subi	r30, 0x00	; 0
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	80 81       	ld	r24, Z
 64a:	0e 94 6d 01 	call	0x2da	; 0x2da <ssd_write>

	set_cursor(4,0);
	for( i = 0; i < 24 ; i++){
		ssd_write(blue[i]);
	}
	for( j = 0; j < 6 ; j++){
 64e:	cf 5f       	subi	r28, 0xFF	; 255
 650:	c6 30       	cpi	r28, 0x06	; 6
 652:	b0 f3       	brcs	.-20     	; 0x640 <write_led+0x96>
		ssd_write(equal[j]);
	}

}
 654:	cf 91       	pop	r28
 656:	08 95       	ret

00000658 <__vector_16>:
	while (1)
	{
		if (TCNT1 >= 31999)	
		{
				PORTB ^= 1<<PB5; //PB5 --> output
				TCNT1 = 0;
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tot_overflow>
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <tot_overflow>
 670:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <tot_overflow>
 674:	8d 37       	cpi	r24, 0x7D	; 125
 676:	30 f0       	brcs	.+12     	; 0x684 <__vector_16+0x2c>
 678:	95 b1       	in	r25, 0x05	; 5
 67a:	80 e2       	ldi	r24, 0x20	; 32
 67c:	89 27       	eor	r24, r25
 67e:	85 b9       	out	0x05, r24	; 5
 680:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <tot_overflow>
 684:	9f 91       	pop	r25
 686:	8f 91       	pop	r24
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_11>:
		}
	}
}
//start Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
{
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
	PORTB ^= 1<<PB5; //PB5 --> output
 6a0:	95 b1       	in	r25, 0x05	; 5
 6a2:	80 e2       	ldi	r24, 0x20	; 32
 6a4:	89 27       	eor	r24, r25
 6a6:	85 b9       	out	0x05, r24	; 5
}
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__vector_18>:
  while (i < 64)
  {
	  if (s[i] == '\0') break;
	  usart_transmit(s[i++]);
  }
}
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
 6d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6dc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <usart_received_char>
 6e0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 6e4:	87 34       	cpi	r24, 0x47	; 71
 6e6:	61 f0       	breq	.+24     	; 0x700 <__vector_18+0x4a>
 6e8:	82 35       	cpi	r24, 0x52	; 82
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <__vector_18+0x3c>
 6ec:	82 34       	cpi	r24, 0x42	; 66
 6ee:	a9 f4       	brne	.+42     	; 0x71a <__vector_18+0x64>
 6f0:	0e c0       	rjmp	.+28     	; 0x70e <__vector_18+0x58>
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <reception_state+0x1>
 6fa:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <reception_state>
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <__vector_18+0x64>
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <reception_state+0x1>
 708:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <reception_state>
 70c:	06 c0       	rjmp	.+12     	; 0x71a <__vector_18+0x64>
 70e:	83 e0       	ldi	r24, 0x03	; 3
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <reception_state+0x1>
 716:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <reception_state>
 71a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 71e:	80 33       	cpi	r24, 0x30	; 48
 720:	08 f4       	brcc	.+2      	; 0x724 <__vector_18+0x6e>
 722:	a6 c0       	rjmp	.+332    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 724:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 728:	8a 33       	cpi	r24, 0x3A	; 58
 72a:	08 f0       	brcs	.+2      	; 0x72e <__vector_18+0x78>
 72c:	a1 c0       	rjmp	.+322    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 72e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 732:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 736:	89 2b       	or	r24, r25
 738:	f9 f4       	brne	.+62     	; 0x778 <__vector_18+0xc2>
 73a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 73e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <a>
 742:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
 746:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <__data_end+0x1>
 74a:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <reception_state>
 74e:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <reception_state+0x1>
 752:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <a>
 756:	0e 94 b5 01 	call	0x36a	; 0x36a <ssd_num_write>
 75a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <a>
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	c0 97       	sbiw	r24, 0x30	; 48
 762:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <ai+0x1>
 766:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <ai>
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
 772:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
 776:	86 c0       	rjmp	.+268    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 778:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 77c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	f9 f4       	brne	.+62     	; 0x7c2 <__vector_18+0x10c>
 784:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 788:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <b>
 78c:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
 790:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <__data_end+0x1>
 794:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <reception_state>
 798:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <reception_state+0x1>
 79c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <b>
 7a0:	0e 94 b5 01 	call	0x36a	; 0x36a <ssd_num_write>
 7a4:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <b>
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	c0 97       	sbiw	r24, 0x30	; 48
 7ac:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <bi+0x1>
 7b0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bi>
 7b4:	82 e0       	ldi	r24, 0x02	; 2
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__data_end+0x1>
 7bc:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
 7c0:	61 c0       	rjmp	.+194    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 7c2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
 7c6:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <__data_end+0x1>
 7ca:	02 97       	sbiw	r24, 0x02	; 2
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_18+0x11a>
 7ce:	5a c0       	rjmp	.+180    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 7d0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 7d4:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <c>
 7d8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <c>
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	c0 97       	sbiw	r24, 0x30	; 48
 7e0:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <ci+0x1>
 7e4:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <ci>
 7e8:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
 7ec:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <__data_end+0x1>
 7f0:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <reception_state>
 7f4:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <reception_state+0x1>
 7f8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <c>
 7fc:	0e 94 b5 01 	call	0x36a	; 0x36a <ssd_num_write>
 800:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bi>
 804:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <bi+0x1>
 808:	9c 01       	movw	r18, r24
 80a:	22 0f       	add	r18, r18
 80c:	33 1f       	adc	r19, r19
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	82 0f       	add	r24, r18
 81c:	93 1f       	adc	r25, r19
 81e:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <ai>
 822:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <ai+0x1>
 826:	82 0f       	add	r24, r18
 828:	93 1f       	adc	r25, r19
 82a:	40 91 95 01 	lds	r20, 0x0195	; 0x800195 <ci>
 82e:	50 91 96 01 	lds	r21, 0x0196	; 0x800196 <ci+0x1>
 832:	64 e6       	ldi	r22, 0x64	; 100
 834:	64 9f       	mul	r22, r20
 836:	90 01       	movw	r18, r0
 838:	65 9f       	mul	r22, r21
 83a:	30 0d       	add	r19, r0
 83c:	11 24       	eor	r1, r1
 83e:	82 0f       	add	r24, r18
 840:	93 1f       	adc	r25, r19
 842:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <di+0x1>
 846:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <di>
 84a:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <di>
 84e:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <di+0x1>
 852:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <reception_state>
 856:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <reception_state+0x1>
 85a:	0e 94 c8 00 	call	0x190	; 0x190 <pwm_led>
 85e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__data_end+0x1>
 862:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
 866:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <reception_state+0x1>
 86a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <reception_state>
 86e:	0a c0       	rjmp	.+20     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 870:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 874:	8a 35       	cpi	r24, 0x5A	; 90
 876:	20 f0       	brcs	.+8      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 878:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 87c:	81 3a       	cpi	r24, 0xA1	; 161
 87e:	10 f0       	brcs	.+4      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 880:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <usart_received_char>
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <init_usart>:

void init_usart(unsigned int baudrate){
	UCSR0C &= (~(1<<UMSEL00) & ~(1<<UMSEL01)); // bit UMSEL = 0 asyncronous mode	
 8a6:	e2 ec       	ldi	r30, 0xC2	; 194
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	20 81       	ld	r18, Z
 8ac:	2f 73       	andi	r18, 0x3F	; 63
 8ae:	20 83       	st	Z, r18
	UCSR0A = (1<<U2X0); // bit U2X = 1 double speed
 8b0:	22 e0       	ldi	r18, 0x02	; 2
 8b2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Baudrate:fosc=16Mhz,U2Xn=1,BaudRate=9600, then UBRR= 207 (DS pag.199)
	UBRR0H = (unsigned char) (baudrate>>8); // write(MSB)
 8b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (baudrate);	//write(LSB)
 8ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = ((1<<UCSZ00) | (1<<UCSZ01)); //8 bits data lenght
 8be:	86 e0       	ldi	r24, 0x06	; 6
 8c0:	80 83       	st	Z, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);	//enable transmitter & receiver
 8c2:	e1 ec       	ldi	r30, 0xC1	; 193
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	88 e1       	ldi	r24, 0x18	; 24
 8c8:	80 83       	st	Z, r24
	//UCSRC = (1<<USBS);	//2 stop bits
	UCSR0B |= (1<<RXCIE0);	//enable reception complete (RXCIE0=1) interrupts
 8ca:	80 81       	ld	r24, Z
 8cc:	80 68       	ori	r24, 0x80	; 128
 8ce:	80 83       	st	Z, r24
 8d0:	08 95       	ret

000008d2 <__tablejump2__>:
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	05 90       	lpm	r0, Z+
 8d8:	f4 91       	lpm	r31, Z
 8da:	e0 2d       	mov	r30, r0
 8dc:	09 94       	ijmp

000008de <_exit>:
 8de:	f8 94       	cli

000008e0 <__stop_program>:
 8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <__stop_program>
